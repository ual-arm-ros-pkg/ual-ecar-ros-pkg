
SteeringControlFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000bfe  00000c92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  00800142  00800142  00000cd4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a66  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d89  00000000  00000000  000028da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1c  00000000  00000000  00003663  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00004080  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ca4  00000000  00000000  000043ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aec  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005b3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	28 01       	movw	r4, r16
  6a:	8e 03       	fmulsu	r16, r22

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	ee ef       	ldi	r30, 0xFE	; 254
  80:	fb e0       	ldi	r31, 0x0B	; 11
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a2 34       	cpi	r26, 0x42	; 66
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	a2 e4       	ldi	r26, 0x42	; 66
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a2 3d       	cpi	r26, 0xD2	; 210
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c6 e3       	ldi	r28, 0x36	; 54
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 f7 05 	call	0xbee	; 0xbee <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 ce 02 	call	0x59c	; 0x59c <main>
  b8:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_Z7InitPWMv>:

/* sets up microprocessor for PWM control of motors */
void InitPWM()
{
// Setup Timer
  TCNT1 = 0;
  c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  TCCR1A =  (0 << COM1A1) | // Set for normal mode for now, macros above change it for directions.
            (0 << COM1A0) |
            (0 << COM1B1) |
            (0 << COM1B0) |
            (1 << WGM11) |
            (1 << WGM10); // Fast PWM, (10+12 = 8bit, 10+11+12 = 10bit)
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
            (0 << ICES1) |
            (0 << WGM13) |
            (1 << WGM12) |
            (0 << CS12) |
            (0 << CS11) |  // Prescaler 000 = off, 10 = no prescale, 11 = 8, 10+11 = 64, 12 = 256, 12+10 = 1024 12+11+x = external clock.(x determins rising/falling edge)
            (1 << CS10);
  ce:	89 e0       	ldi	r24, 0x09	; 9
  d0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

  TCCR1C = 0x00;  // Set the Force bits to 0 for PWM modes.
  d4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
            //(0 << OCIE1A) | // Output Compare A Match Interrupt Enable
            //(0 << TOIE1); // Timer 1 Overflow interrupt enable
//
  /* set up ports */
  //SetupLPWM();
  SetupRPWM();
  d8:	21 9a       	sbi	0x04, 1	; 4
  da:	21 9a       	sbi	0x04, 1	; 4
  
  // 
  sbi(DDRB, DDB2); 
  dc:	22 9a       	sbi	0x04, 2	; 4
  sbi(PORTB, PORTD4);
  de:	2c 9a       	sbi	0x05, 4	; 5

  /* OCR1A/B are the values that the timer is compared to; a match will
     cause the output to change; small values mean the motor runs for a
     short period (slower); larger values are longer times (faster)*/
  //lPWM = 
  rPWM = 0;	// (value is irrelevant since outputs are disconnected)
  e0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  e8:	08 95       	ret

000000ea <_Z11SetMotorPWMib>:

/* pwm values can range from -255 (full-speed reverse)
   to 255 (full-speed forward), with 0 indicating a stop */
void SetMotorPWM(int pwm, bool update_last_cmd)
{
	if (update_last_cmd) {
  ea:	66 23       	and	r22, r22
  ec:	21 f0       	breq	.+8      	; 0xf6 <_Z11SetMotorPWMib+0xc>
		last_pwm_cmd = pwm;
  ee:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x1>
  f2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
	}

  if (pwm == 0)
  f6:	00 97       	sbiw	r24, 0x00	; 0
  f8:	51 f4       	brne	.+20     	; 0x10e <_Z11SetMotorPWMib+0x24>
  {
    RStop();
  fa:	45 98       	cbi	0x08, 5	; 8
  fc:	e0 e8       	ldi	r30, 0x80	; 128
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8f 77       	andi	r24, 0x7F	; 127
 104:	80 83       	st	Z, r24
 106:	80 81       	ld	r24, Z
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret
  }
  else
  {
    if (pwm >= 0)
 10e:	99 23       	and	r25, r25
 110:	54 f0       	brlt	.+20     	; 0x126 <_Z11SetMotorPWMib+0x3c>
    {
      RFwd();
 112:	45 98       	cbi	0x08, 5	; 8
 114:	e0 e8       	ldi	r30, 0x80	; 128
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	20 81       	ld	r18, Z
 11a:	20 68       	ori	r18, 0x80	; 128
 11c:	20 83       	st	Z, r18
 11e:	20 81       	ld	r18, Z
 120:	2f 7b       	andi	r18, 0xBF	; 191
 122:	20 83       	st	Z, r18
 124:	0c c0       	rjmp	.+24     	; 0x13e <_Z11SetMotorPWMib+0x54>
    }
    else
    {
      RRev();
 126:	45 9a       	sbi	0x08, 5	; 8
 128:	e0 e8       	ldi	r30, 0x80	; 128
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	20 81       	ld	r18, Z
 12e:	20 68       	ori	r18, 0x80	; 128
 130:	20 83       	st	Z, r18
 132:	20 81       	ld	r18, Z
 134:	2f 7b       	andi	r18, 0xBF	; 191
 136:	20 83       	st	Z, r18
      pwm = -pwm;
 138:	91 95       	neg	r25
 13a:	81 95       	neg	r24
 13c:	91 09       	sbc	r25, r1
 13e:	81 15       	cp	r24, r1
 140:	24 e0       	ldi	r18, 0x04	; 4
 142:	92 07       	cpc	r25, r18
 144:	14 f0       	brlt	.+4      	; 0x14a <_Z11SetMotorPWMib+0x60>
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	93 e0       	ldi	r25, 0x03	; 3
    }
    if (pwm > 1023)
      pwm = 1023;
    rPWM = pwm;		// set width for PWM
 14a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 14e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 152:	08 95       	ret

00000154 <_Z12set_relay_onv>:
}


void set_relay_on()
{
	sbi(DDRD,DDD2);
 154:	52 9a       	sbi	0x0a, 2	; 10
	cbi(PORTD,PORTD2);	
 156:	5a 98       	cbi	0x0b, 2	; 11
 158:	08 95       	ret

0000015a <_Z13set_relay_offv>:
}	

void set_relay_off()
{
	sbi(DDRD,DDD2);
 15a:	52 9a       	sbi	0x0a, 2	; 10
	sbi(PORTD,PORTD2);
 15c:	5a 9a       	sbi	0x0b, 2	; 11
 15e:	08 95       	ret

00000160 <_Z15process_commandPKhj>:

/** Process a command from the PC and send any required response back.
  * \return false on error, unknown command, etc.
  */
bool process_command(const uint8_t *cmd, const uint16_t cmd_len)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
	switch (cmd[0])
 166:	98 81       	ld	r25, Y
 168:	92 30       	cpi	r25, 0x02	; 2
 16a:	09 f4       	brne	.+2      	; 0x16e <_Z15process_commandPKhj+0xe>
 16c:	40 c0       	rjmp	.+128    	; 0x1ee <_Z15process_commandPKhj+0x8e>
 16e:	28 f4       	brcc	.+10     	; 0x17a <_Z15process_commandPKhj+0x1a>
 170:	99 23       	and	r25, r25
 172:	59 f0       	breq	.+22     	; 0x18a <_Z15process_commandPKhj+0x2a>
 174:	91 30       	cpi	r25, 0x01	; 1
 176:	b1 f0       	breq	.+44     	; 0x1a4 <_Z15process_commandPKhj+0x44>
 178:	67 c0       	rjmp	.+206    	; 0x248 <_Z15process_commandPKhj+0xe8>
 17a:	94 30       	cpi	r25, 0x04	; 4
 17c:	09 f4       	brne	.+2      	; 0x180 <_Z15process_commandPKhj+0x20>
 17e:	5b c0       	rjmp	.+182    	; 0x236 <_Z15process_commandPKhj+0xd6>
 180:	08 f4       	brcc	.+2      	; 0x184 <_Z15process_commandPKhj+0x24>
 182:	50 c0       	rjmp	.+160    	; 0x224 <_Z15process_commandPKhj+0xc4>
 184:	95 30       	cpi	r25, 0x05	; 5
 186:	b1 f0       	breq	.+44     	; 0x1b4 <_Z15process_commandPKhj+0x54>
 188:	5f c0       	rjmp	.+190    	; 0x248 <_Z15process_commandPKhj+0xe8>
	{
	case CMD_SET_CLUTCH:
		{
			const TCmdSetClutch *frame = (TCmdSetClutch*)cmd;
			if (frame->relay_state)
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	88 23       	and	r24, r24
 18e:	29 f0       	breq	.+10     	; 0x19a <_Z15process_commandPKhj+0x3a>
			{
				set_relay_on();
 190:	0e 94 aa 00 	call	0x154	; 0x154 <_Z12set_relay_onv>
				LED_ON(6);
 194:	56 9a       	sbi	0x0a, 6	; 10
 196:	5e 98       	cbi	0x0b, 6	; 11
 198:	57 c0       	rjmp	.+174    	; 0x248 <_Z15process_commandPKhj+0xe8>
			}					
			else
			{
				set_relay_off();
 19a:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z13set_relay_offv>
				LED_OFF(6);
 19e:	56 9a       	sbi	0x0a, 6	; 10
 1a0:	5e 9a       	sbi	0x0b, 6	; 11
 1a2:	52 c0       	rjmp	.+164    	; 0x248 <_Z15process_commandPKhj+0xe8>
		break;
		
	case CMD_SET_AUTO_MODE:
	{
		const TCmdSetAutoMode *frame = (TCmdSetAutoMode*)cmd;
		firm_params.ENABLE_POS_CONTROL = frame->enable_pos_control ? 1:0;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	99 81       	ldd	r25, Y+1	; 0x01
 1a8:	91 11       	cpse	r25, r1
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <_Z15process_commandPKhj+0x4e>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <firm_params>
	}
	break;
 1b2:	4a c0       	rjmp	.+148    	; 0x248 <_Z15process_commandPKhj+0xe8>

	case CMD_SET_OVERCURRENT_THRESHOLD:
	{
		const TCmdSetOvercurrentThreshold *frame = (TCmdSetOvercurrentThreshold*)cmd;
		OVERCURRENT_THRESHOLD_ADC = (uint16_t)( frame->threshold_volt * 1024 / 5.0f);
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	40 e8       	ldi	r20, 0x80	; 128
 1ba:	54 e4       	ldi	r21, 0x44	; 68
 1bc:	69 81       	ldd	r22, Y+1	; 0x01
 1be:	7a 81       	ldd	r23, Y+2	; 0x02
 1c0:	8b 81       	ldd	r24, Y+3	; 0x03
 1c2:	9c 81       	ldd	r25, Y+4	; 0x04
 1c4:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	40 ea       	ldi	r20, 0xA0	; 160
 1ce:	50 e4       	ldi	r21, 0x40	; 64
 1d0:	0e 94 9f 03 	call	0x73e	; 0x73e <__divsf3>
 1d4:	0e 94 11 04 	call	0x822	; 0x822 <__fixunssfsi>
 1d8:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <OVERCURRENT_THRESHOLD_ADC+0x1>
 1dc:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <OVERCURRENT_THRESHOLD_ADC>
		OVERCURRENT_TIME_THRESHOLD_MS = frame->threshold_ms_length;
 1e0:	8d 81       	ldd	r24, Y+5	; 0x05
 1e2:	9e 81       	ldd	r25, Y+6	; 0x06
 1e4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <OVERCURRENT_TIME_THRESHOLD_MS+0x1>
 1e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <OVERCURRENT_TIME_THRESHOLD_MS>
	}
	break;
 1ec:	2d c0       	rjmp	.+90     	; 0x248 <_Z15process_commandPKhj+0xe8>

	case CMD_SET_PWM_VALUE:
		{
			const TCmdSetPWMValue *frame = (TCmdSetPWMValue*)cmd;
			if (OVERCURRENT_TRIGGERED) 
 1ee:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <OVERCURRENT_TRIGGERED>
 1f2:	88 23       	and	r24, r24
 1f4:	21 f1       	breq	.+72     	; 0x23e <_Z15process_commandPKhj+0xde>
			{
				// shall we reset the o.c. flag?
				if (frame->pwm_value==0 || 
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	9a 81       	ldd	r25, Y+2	; 0x02
 1fa:	ab 81       	ldd	r26, Y+3	; 0x03
 1fc:	bc 81       	ldd	r27, Y+4	; 0x04
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	a1 05       	cpc	r26, r1
 202:	b1 05       	cpc	r27, r1
 204:	61 f0       	breq	.+24     	; 0x21e <_Z15process_commandPKhj+0xbe>
 206:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <OVERCURRENT_PWM_POSITIVE_WHEN_TRIGGERED>
 20a:	22 23       	and	r18, r18
 20c:	19 f0       	breq	.+6      	; 0x214 <_Z15process_commandPKhj+0xb4>
					(OVERCURRENT_PWM_POSITIVE_WHEN_TRIGGERED && frame->pwm_value<0) ||
 20e:	bb 23       	and	r27, r27
 210:	dc f4       	brge	.+54     	; 0x248 <_Z15process_commandPKhj+0xe8>
 212:	05 c0       	rjmp	.+10     	; 0x21e <_Z15process_commandPKhj+0xbe>
					(!OVERCURRENT_PWM_POSITIVE_WHEN_TRIGGERED && frame->pwm_value>0)
 214:	18 16       	cp	r1, r24
 216:	19 06       	cpc	r1, r25
 218:	1a 06       	cpc	r1, r26
 21a:	1b 06       	cpc	r1, r27
 21c:	ac f4       	brge	.+42     	; 0x248 <_Z15process_commandPKhj+0xe8>
				 )
				{
					OVERCURRENT_TRIGGERED = false;
 21e:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <OVERCURRENT_TRIGGERED>
 222:	0d c0       	rjmp	.+26     	; 0x23e <_Z15process_commandPKhj+0xde>
		break;

	case CMD_SET_POS_CONTROL_SETPOINT:
	{
		const TCmdSetPosControlSetPoint *frame = (TCmdSetPosControlSetPoint*)cmd;
		OVERCURRENT_TRIGGERED = false;
 224:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <OVERCURRENT_TRIGGERED>

		MOTOR_CONTROL_SETPOINT = frame->setpoint_ticks;
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	9a 81       	ldd	r25, Y+2	; 0x02
 22c:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <MOTOR_CONTROL_SETPOINT+0x1>
 230:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <MOTOR_CONTROL_SETPOINT>
	}
	break;
 234:	09 c0       	rjmp	.+18     	; 0x248 <_Z15process_commandPKhj+0xe8>

	case CMD_SET_REPORT_DECIMATION:
	{
		const TCmdSetReportDecimation *frame = (TCmdSetReportDecimation*)cmd;
		firm_params.SEND_ENCODER_DECIMATION = frame->report_decimation;
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <firm_params+0x5>
	}
	break;
 23c:	05 c0       	rjmp	.+10     	; 0x248 <_Z15process_commandPKhj+0xe8>
				}
			}
			
			if (!OVERCURRENT_TRIGGERED) 
			{
				SetMotorPWM(frame->pwm_value);
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	9a 81       	ldd	r25, Y+2	; 0x02
 244:	0e 94 75 00 	call	0xea	; 0xea <_Z11SetMotorPWMib>
		//return false; // No known command!
		break;	
	}		
	
	return true;	
}
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <_GLOBAL__sub_I_firm_params>:
	// Defaults:
	TFirmwareParams() :
		ENABLE_POS_CONTROL(0),
		READ_ENCODERS_PERIOD(5),
		MOTOR_CONTROL_PERIOD(5),
		SEND_ENCODER_DECIMATION(100)
 250:	e4 e4       	ldi	r30, 0x44	; 68
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	10 82       	st	Z, r1
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	92 83       	std	Z+2, r25	; 0x02
 25c:	81 83       	std	Z+1, r24	; 0x01
 25e:	94 83       	std	Z+4, r25	; 0x04
 260:	83 83       	std	Z+3, r24	; 0x03
 262:	84 e6       	ldi	r24, 0x64	; 100
 264:	85 83       	std	Z+5, r24	; 0x05
 266:	08 95       	ret

00000268 <_ZN4UART9ConfigureEbbbcj>:
{	
	WriteByte(STEERCONTROL_COMMS_FRAME_START_FLAG);
	Write((unsigned char*)&len, 2);
	Write((unsigned char*)data, len);
	WriteByte(STEERCONTROL_COMMS_FRAME_END_FLAG);
}
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 272:	88 23       	and	r24, r24
 274:	11 f0       	breq	.+4      	; 0x27a <_ZN4UART9ConfigureEbbbcj+0x12>
 276:	80 e1       	ldi	r24, 0x10	; 16
 278:	01 c0       	rjmp	.+2      	; 0x27c <_ZN4UART9ConfigureEbbbcj+0x14>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	61 11       	cpse	r22, r1
 27e:	88 60       	ori	r24, 0x08	; 8
 280:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 284:	23 70       	andi	r18, 0x03	; 3
 286:	80 e1       	ldi	r24, 0x10	; 16
 288:	28 9f       	mul	r18, r24
 28a:	90 01       	movw	r18, r0
 28c:	11 24       	eor	r1, r1
 28e:	26 68       	ori	r18, 0x86	; 134
 290:	41 11       	cpse	r20, r1
 292:	28 60       	ori	r18, 0x08	; 8
 294:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 298:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 29c:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	08 95       	ret

000002a6 <_ZN4UART9WriteByteEh>:
 2a6:	e0 ec       	ldi	r30, 0xC0	; 192
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	90 81       	ld	r25, Z
 2ac:	95 ff       	sbrs	r25, 5
 2ae:	fd cf       	rjmp	.-6      	; 0x2aa <_ZN4UART9WriteByteEh+0x4>
 2b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2b4:	08 95       	ret

000002b6 <_ZN4UART5WriteEPhj>:
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	61 15       	cp	r22, r1
 2c0:	71 05       	cpc	r23, r1
 2c2:	51 f0       	breq	.+20     	; 0x2d8 <_ZN4UART5WriteEPhj+0x22>
 2c4:	8c 01       	movw	r16, r24
 2c6:	ec 01       	movw	r28, r24
 2c8:	06 0f       	add	r16, r22
 2ca:	17 1f       	adc	r17, r23
 2cc:	89 91       	ld	r24, Y+
 2ce:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_ZN4UART9WriteByteEh>
 2d2:	c0 17       	cp	r28, r16
 2d4:	d1 07       	cpc	r29, r17
 2d6:	d1 f7       	brne	.-12     	; 0x2cc <_ZN4UART5WriteEPhj+0x16>
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	08 95       	ret

000002e2 <_ZN4UART17WriteStringFramedEPKc>:
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <_ZN4UART17WriteStringFramedEPKc+0xa>
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	8c 01       	movw	r16, r24
 2f2:	fc 01       	movw	r30, r24
 2f4:	01 90       	ld	r0, Z+
 2f6:	00 20       	and	r0, r0
 2f8:	e9 f7       	brne	.-6      	; 0x2f4 <_ZN4UART17WriteStringFramedEPKc+0x12>
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	e8 1b       	sub	r30, r24
 2fe:	f9 0b       	sbc	r31, r25
 300:	fa 83       	std	Y+2, r31	; 0x02
 302:	e9 83       	std	Y+1, r30	; 0x01
 304:	89 e6       	ldi	r24, 0x69	; 105
 306:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_ZN4UART9WriteByteEh>
 30a:	62 e0       	ldi	r22, 0x02	; 2
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	ce 01       	movw	r24, r28
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_ZN4UART5WriteEPhj>
 316:	69 81       	ldd	r22, Y+1	; 0x01
 318:	7a 81       	ldd	r23, Y+2	; 0x02
 31a:	c8 01       	movw	r24, r16
 31c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_ZN4UART5WriteEPhj>
 320:	86 e9       	ldi	r24, 0x96	; 150
 322:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_ZN4UART9WriteByteEh>
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	08 95       	ret

00000334 <_ZN4UART33InitInterruptBasedCommandReceiverEv>:

// Inits the interrupt, event-based system:
void InitInterruptBasedCommandReceiver()
{
	UART_LAST_RX_CMD_NEW=false;
 334:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <UART_LAST_RX_CMD_NEW>
	UART_LAST_RX_CMD_LEN=0;
 338:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <UART_LAST_RX_CMD_LEN+0x1>
 33c:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <UART_LAST_RX_CMD_LEN>
	UART_LAST_RX_CMD_INDEX=0;
 340:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <UART_LAST_RX_CMD_INDEX+0x1>
 344:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <UART_LAST_RX_CMD_INDEX>
	
	sbi(UCSR0B, RXCIE0);	
 348:	e1 ec       	ldi	r30, 0xC1	; 193
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	80 83       	st	Z, r24
 352:	08 95       	ret

00000354 <_Z22realtime_motor_controlv>:

// -----------------------------------------------------
//   Motor control
// -----------------------------------------------------
void realtime_motor_control()
{
 354:	8f 92       	push	r8
 356:	9f 92       	push	r9
 358:	af 92       	push	r10
 35a:	bf 92       	push	r11
 35c:	cf 92       	push	r12
 35e:	df 92       	push	r13
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
	if (OVERCURRENT_TRIGGERED)
 36c:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <OVERCURRENT_TRIGGERED>
 370:	81 11       	cpse	r24, r1
 372:	8a c0       	rjmp	.+276    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	
#define FIXEDPOINTPRECISION   1000	
	
	// "P" constant  * 1024/100%-duty-cycle
	const int64_t K_P = 1      * FIXEDPOINTPRECISION;  // /10000 is to simulate decimal points
	const int64_t err = -( (int64_t)MOTOR_CONTROL_SETPOINT - (int64_t)ENCODER_READ.ticks_acum);
 374:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <ENCODER_READ+0xa>
 378:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <ENCODER_READ+0xb>
 37c:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <ENCODER_READ+0xc>
 380:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <ENCODER_READ+0xd>
 384:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <MOTOR_CONTROL_SETPOINT>
 388:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <MOTOR_CONTROL_SETPOINT+0x1>
 38c:	6c 01       	movw	r12, r24
 38e:	7d 01       	movw	r14, r26
 390:	ff 0c       	add	r15, r15
 392:	cc 08       	sbc	r12, r12
 394:	dc 2c       	mov	r13, r12
 396:	76 01       	movw	r14, r12
 398:	1f 2f       	mov	r17, r31
 39a:	11 0f       	add	r17, r17
 39c:	11 0b       	sbc	r17, r17
 39e:	28 2f       	mov	r18, r24
 3a0:	39 2f       	mov	r19, r25
 3a2:	4a 2f       	mov	r20, r26
 3a4:	5b 2f       	mov	r21, r27
 3a6:	6c 2d       	mov	r22, r12
 3a8:	7c 2d       	mov	r23, r12
 3aa:	8c 2d       	mov	r24, r12
 3ac:	9c 2d       	mov	r25, r12
 3ae:	ae 2e       	mov	r10, r30
 3b0:	bf 2e       	mov	r11, r31
 3b2:	c1 2e       	mov	r12, r17
 3b4:	d1 2e       	mov	r13, r17
 3b6:	e1 2e       	mov	r14, r17
 3b8:	f1 2e       	mov	r15, r17
 3ba:	01 2f       	mov	r16, r17
 3bc:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__subdi3>
 3c0:	82 2e       	mov	r8, r18
 3c2:	93 2e       	mov	r9, r19
 3c4:	d4 2f       	mov	r29, r20
 3c6:	c5 2f       	mov	r28, r21
 3c8:	b6 2f       	mov	r27, r22
 3ca:	a7 2f       	mov	r26, r23
 3cc:	f8 2f       	mov	r31, r24
 3ce:	e9 2f       	mov	r30, r25
	int64_t act = (K_P * err)    / FIXEDPOINTPRECISION;
 3d0:	06 e0       	ldi	r16, 0x06	; 6
 3d2:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__ashldi3>
 3d6:	a8 2c       	mov	r10, r8
 3d8:	b9 2c       	mov	r11, r9
 3da:	cd 2e       	mov	r12, r29
 3dc:	dc 2e       	mov	r13, r28
 3de:	eb 2e       	mov	r14, r27
 3e0:	fa 2e       	mov	r15, r26
 3e2:	0f 2f       	mov	r16, r31
 3e4:	1e 2f       	mov	r17, r30
 3e6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__subdi3>
 3ea:	01 e0       	ldi	r16, 0x01	; 1
 3ec:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__ashldi3>
 3f0:	0f 2f       	mov	r16, r31
 3f2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__subdi3>
 3f6:	03 e0       	ldi	r16, 0x03	; 3
 3f8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__ashldi3>
 3fc:	0f 2e       	mov	r0, r31
 3fe:	f8 ee       	ldi	r31, 0xE8	; 232
 400:	af 2e       	mov	r10, r31
 402:	f0 2d       	mov	r31, r0
 404:	0f 2e       	mov	r0, r31
 406:	f3 e0       	ldi	r31, 0x03	; 3
 408:	bf 2e       	mov	r11, r31
 40a:	f0 2d       	mov	r31, r0
 40c:	c1 2c       	mov	r12, r1
 40e:	d1 2c       	mov	r13, r1
 410:	e1 2c       	mov	r14, r1
 412:	f1 2c       	mov	r15, r1
 414:	00 e0       	ldi	r16, 0x00	; 0
 416:	10 e0       	ldi	r17, 0x00	; 0
 418:	0e 94 00 05 	call	0xa00	; 0xa00 <__divdi3>
 41c:	f2 2f       	mov	r31, r18
 41e:	e3 2f       	mov	r30, r19
 420:	e4 2e       	mov	r14, r20
 422:	f5 2e       	mov	r15, r21
 424:	06 2f       	mov	r16, r22
 426:	17 2f       	mov	r17, r23
 428:	d8 2f       	mov	r29, r24
 42a:	c9 2f       	mov	r28, r25
 42c:	21 30       	cpi	r18, 0x01	; 1
 42e:	3c 4f       	sbci	r19, 0xFC	; 252
 430:	4f 4f       	sbci	r20, 0xFF	; 255
 432:	5f 4f       	sbci	r21, 0xFF	; 255
 434:	6f 4f       	sbci	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	8f 4f       	sbci	r24, 0xFF	; 255
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	54 f4       	brge	.+20     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	ec ef       	ldi	r30, 0xFC	; 252
 442:	ee 24       	eor	r14, r14
 444:	ea 94       	dec	r14
 446:	ff 24       	eor	r15, r15
 448:	fa 94       	dec	r15
 44a:	0f ef       	ldi	r16, 0xFF	; 255
 44c:	1f ef       	ldi	r17, 0xFF	; 255
 44e:	df ef       	ldi	r29, 0xFF	; 255
 450:	cf ef       	ldi	r28, 0xFF	; 255
 452:	bf 2f       	mov	r27, r31
 454:	ae 2f       	mov	r26, r30
 456:	2f 2f       	mov	r18, r31
 458:	3e 2f       	mov	r19, r30
 45a:	4e 2d       	mov	r20, r14
 45c:	5f 2d       	mov	r21, r15
 45e:	60 2f       	mov	r22, r16
 460:	71 2f       	mov	r23, r17
 462:	8d 2f       	mov	r24, r29
 464:	9c 2f       	mov	r25, r28
 466:	2f 3f       	cpi	r18, 0xFF	; 255
 468:	33 40       	sbci	r19, 0x03	; 3
 46a:	41 05       	cpc	r20, r1
 46c:	51 05       	cpc	r21, r1
 46e:	61 05       	cpc	r22, r1
 470:	71 05       	cpc	r23, r1
 472:	81 05       	cpc	r24, r1
 474:	91 05       	cpc	r25, r1
 476:	19 f0       	breq	.+6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 478:	14 f0       	brlt	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	bf ef       	ldi	r27, 0xFF	; 255
 47c:	a3 e0       	ldi	r26, 0x03	; 3
	
	if (act<-1023) act = -1023; 
	if (act>1023) act=1023;
	
	SetMotorPWM((int)act);
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	8b 2f       	mov	r24, r27
 482:	9a 2f       	mov	r25, r26
 484:	0e 94 75 00 	call	0xea	; 0xea <_Z11SetMotorPWMib>
}
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	ff 90       	pop	r15
 492:	ef 90       	pop	r14
 494:	df 90       	pop	r13
 496:	cf 90       	pop	r12
 498:	bf 90       	pop	r11
 49a:	af 90       	pop	r10
 49c:	9f 90       	pop	r9
 49e:	8f 90       	pop	r8
 4a0:	08 95       	ret

000004a2 <_Z11getTimer_usv>:
	while (ADCSRA & (1<<ADSC))
	{		
	}
	
	return ADC;	
}
 4a2:	f8 94       	cli
 4a4:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <timer_us>
 4a8:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <timer_us+0x1>
 4ac:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <timer_us+0x2>
 4b0:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <timer_us+0x3>
 4b4:	78 94       	sei
 4b6:	08 95       	ret

000004b8 <_Z23configureMillisecsTimerv>:
 4b8:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <timer_us>
 4bc:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <timer_us+0x1>
 4c0:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <timer_us+0x2>
 4c4:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <timer_us+0x3>
 4c8:	16 bc       	out	0x26, r1	; 38
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	84 bd       	out	0x24, r24	; 36
 4ce:	85 bd       	out	0x25, r24	; 37
 4d0:	87 ec       	ldi	r24, 0xC7	; 199
 4d2:	87 bd       	out	0x27, r24	; 39
 4d4:	ee e6       	ldi	r30, 0x6E	; 110
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	82 60       	ori	r24, 0x02	; 2
 4dc:	80 83       	st	Z, r24
 4de:	08 95       	ret

000004e0 <__vector_14>:
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	2f 93       	push	r18
 4ec:	3f 93       	push	r19
 4ee:	8f 93       	push	r24
 4f0:	9f 93       	push	r25
 4f2:	af 93       	push	r26
 4f4:	bf 93       	push	r27
 4f6:	ef 93       	push	r30
 4f8:	ff 93       	push	r31
 4fa:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <timer_us>
 4fe:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <timer_us+0x1>
 502:	a0 91 d0 01 	lds	r26, 0x01D0	; 0x8001d0 <timer_us+0x2>
 506:	b0 91 d1 01 	lds	r27, 0x01D1	; 0x8001d1 <timer_us+0x3>
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	a1 1d       	adc	r26, r1
 50e:	b1 1d       	adc	r27, r1
 510:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <timer_us>
 514:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <timer_us+0x1>
 518:	a0 93 d0 01 	sts	0x01D0, r26	; 0x8001d0 <timer_us+0x2>
 51c:	b0 93 d1 01 	sts	0x01D1, r27	; 0x8001d1 <timer_us+0x3>
 520:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <MOTOR_CONTROL_PERIOD_CNT>
 524:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <MOTOR_CONTROL_PERIOD_CNT+0x1>
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <MOTOR_CONTROL_PERIOD_CNT+0x1>
 52e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <MOTOR_CONTROL_PERIOD_CNT>
 532:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <firm_params+0x3>
 536:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <firm_params+0x4>
 53a:	82 17       	cp	r24, r18
 53c:	93 07       	cpc	r25, r19
 53e:	38 f0       	brcs	.+14     	; 0x54e <__vector_14+0x6e>
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <RUN_realtime_motor_control>
 546:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <MOTOR_CONTROL_PERIOD_CNT+0x1>
 54a:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <MOTOR_CONTROL_PERIOD_CNT>
 54e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 552:	86 fd       	sbrc	r24, 6
 554:	0d c0       	rjmp	.+26     	; 0x570 <__vector_14+0x90>
 556:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 55a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 55e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <ADC_CURRENT_SENSE_READ+0x1>
 562:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ADC_CURRENT_SENSE_READ>
 566:	ea e7       	ldi	r30, 0x7A	; 122
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	80 64       	ori	r24, 0x40	; 64
 56e:	80 83       	st	Z, r24
 570:	ff 91       	pop	r31
 572:	ef 91       	pop	r30
 574:	bf 91       	pop	r27
 576:	af 91       	pop	r26
 578:	9f 91       	pop	r25
 57a:	8f 91       	pop	r24
 57c:	3f 91       	pop	r19
 57e:	2f 91       	pop	r18
 580:	0f 90       	pop	r0
 582:	0f be       	out	0x3f, r0	; 63
 584:	0f 90       	pop	r0
 586:	1f 90       	pop	r1
 588:	18 95       	reti

0000058a <_Z13configureADCsv>:
 58a:	80 e4       	ldi	r24, 0x40	; 64
 58c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 590:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 594:	87 ec       	ldi	r24, 0xC7	; 199
 596:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 59a:	08 95       	ret

0000059c <main>:
}


int main(void)
{
	UART::Configure(true,true,false,0,BAUD_PRESCALE);
 59c:	00 e1       	ldi	r16, 0x10	; 16
 59e:	10 e0       	ldi	r17, 0x00	; 0
 5a0:	20 e0       	ldi	r18, 0x00	; 0
 5a2:	40 e0       	ldi	r20, 0x00	; 0
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	0e 94 34 01 	call	0x268	; 0x268 <_ZN4UART9ConfigureEbbbcj>
	UART::InitInterruptBasedCommandReceiver();
 5ac:	0e 94 9a 01 	call	0x334	; 0x334 <_ZN4UART33InitInterruptBasedCommandReceiverEv>

	UART::WriteStringFramed( "Steering Control Firmware-Build " __TIMESTAMP__ "\r\n" );
 5b0:	86 e0       	ldi	r24, 0x06	; 6
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN4UART17WriteStringFramedEPKc>

	//encoders_init();
	configureADCs();
 5b8:	0e 94 c5 02 	call	0x58a	; 0x58a <_Z13configureADCsv>
	
	InitPWM();
 5bc:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z7InitPWMv>

	configureMillisecsTimer();
 5c0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Z23configureMillisecsTimerv>
 5c4:	83 e0       	ldi	r24, 0x03	; 3
 5c6:	90 e0       	ldi	r25, 0x00	; 0

	for (int i=0;i<3;i++)
	{
		LED_ON(6);  _delay_ms(30);
 5c8:	56 9a       	sbi	0x0a, 6	; 10
 5ca:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5cc:	2f ef       	ldi	r18, 0xFF	; 255
 5ce:	36 e7       	ldi	r19, 0x76	; 118
 5d0:	41 e0       	ldi	r20, 0x01	; 1
 5d2:	21 50       	subi	r18, 0x01	; 1
 5d4:	30 40       	sbci	r19, 0x00	; 0
 5d6:	40 40       	sbci	r20, 0x00	; 0
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <main+0x36>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <main+0x40>
 5dc:	00 00       	nop
		LED_OFF(6); _delay_ms(30);
 5de:	56 9a       	sbi	0x0a, 6	; 10
 5e0:	5e 9a       	sbi	0x0b, 6	; 11
 5e2:	5f ef       	ldi	r21, 0xFF	; 255
 5e4:	26 e7       	ldi	r18, 0x76	; 118
 5e6:	31 e0       	ldi	r19, 0x01	; 1
 5e8:	51 50       	subi	r21, 0x01	; 1
 5ea:	20 40       	sbci	r18, 0x00	; 0
 5ec:	30 40       	sbci	r19, 0x00	; 0
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <main+0x4c>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <main+0x56>
 5f2:	00 00       	nop
 5f4:	01 97       	sbiw	r24, 0x01	; 1
	
	InitPWM();

	configureMillisecsTimer();

	for (int i=0;i<3;i++)
 5f6:	41 f7       	brne	.-48     	; 0x5c8 <main+0x2c>
	{
		LED_ON(6);  _delay_ms(30);
		LED_OFF(6); _delay_ms(30);
	}	
	// Enable interrupts:
	sei();
 5f8:	78 94       	sei
			realtime_update_encoder_read();
			RUN_realtime_update_encoder_read = false;
			READ_ENCODERS_NEW=true;
		}
#endif
		if (RUN_realtime_motor_control && firm_params.ENABLE_POS_CONTROL!=0)
 5fa:	c4 e4       	ldi	r28, 0x44	; 68
 5fc:	d1 e0       	ldi	r29, 0x01	; 1
				

				// If timer > limit: 
				if (OVERCURRENT_ELLAPSED_100US >= OVERCURRENT_TIME_THRESHOLD_MS * 10)
				{
					OVERCURRENT_TRIGGERED = true;
 5fe:	ff 24       	eor	r15, r15
 600:	f3 94       	inc	r15

		// Overcurrent protection:
		if (!OVERCURRENT_TRIGGERED)
		{
			if (  ADC_CURRENT_SENSE_READ > OCUR_CENTRAL_PT+OVERCURRENT_THRESHOLD_ADC ||
					ADC_CURRENT_SENSE_READ < OCUR_CENTRAL_PT-OVERCURRENT_THRESHOLD_ADC)
 602:	00 e0       	ldi	r16, 0x00	; 0
 604:	12 e0       	ldi	r17, 0x02	; 2
			realtime_update_encoder_read();
			RUN_realtime_update_encoder_read = false;
			READ_ENCODERS_NEW=true;
		}
#endif
		if (RUN_realtime_motor_control && firm_params.ENABLE_POS_CONTROL!=0)
 606:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <RUN_realtime_motor_control>
 60a:	88 23       	and	r24, r24
 60c:	39 f0       	breq	.+14     	; 0x61c <main+0x80>
 60e:	88 81       	ld	r24, Y
 610:	88 23       	and	r24, r24
 612:	21 f0       	breq	.+8      	; 0x61c <main+0x80>
		{
			realtime_motor_control();
 614:	0e 94 aa 01 	call	0x354	; 0x354 <_Z22realtime_motor_controlv>
			RUN_realtime_motor_control = false;
 618:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <RUN_realtime_motor_control>
				//UART::WriteStringFramed(s);
			}							
		}
#endif

		if (UART_LAST_RX_CMD_NEW)
 61c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <UART_LAST_RX_CMD_NEW>
 620:	88 23       	and	r24, r24
 622:	51 f0       	breq	.+20     	; 0x638 <main+0x9c>
		{
			process_command(UART_LAST_RX_CMD, UART_LAST_RX_CMD_LEN);
 624:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <UART_LAST_RX_CMD_LEN>
 628:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <UART_LAST_RX_CMD_LEN+0x1>
 62c:	8f e4       	ldi	r24, 0x4F	; 79
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	0e 94 b0 00 	call	0x160	; 0x160 <_Z15process_commandPKhj>
			UART_LAST_RX_CMD_NEW=false;
 634:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <UART_LAST_RX_CMD_NEW>
		}

		// Overcurrent protection:
		if (!OVERCURRENT_TRIGGERED)
 638:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <OVERCURRENT_TRIGGERED>
 63c:	81 11       	cpse	r24, r1
 63e:	68 c0       	rjmp	.+208    	; 0x710 <main+0x174>
		{
			if (  ADC_CURRENT_SENSE_READ > OCUR_CENTRAL_PT+OVERCURRENT_THRESHOLD_ADC ||
 640:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <OVERCURRENT_THRESHOLD_ADC>
 644:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <OVERCURRENT_THRESHOLD_ADC+0x1>
 648:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <ADC_CURRENT_SENSE_READ>
 64c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <ADC_CURRENT_SENSE_READ+0x1>
 650:	ac 01       	movw	r20, r24
 652:	5e 5f       	subi	r21, 0xFE	; 254
 654:	42 17       	cp	r20, r18
 656:	53 07       	cpc	r21, r19
 658:	58 f0       	brcs	.+22     	; 0x670 <main+0xd4>
					ADC_CURRENT_SENSE_READ < OCUR_CENTRAL_PT-OVERCURRENT_THRESHOLD_ADC)
 65a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <ADC_CURRENT_SENSE_READ>
 65e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <ADC_CURRENT_SENSE_READ+0x1>
 662:	a8 01       	movw	r20, r16
 664:	48 1b       	sub	r20, r24
 666:	59 0b       	sbc	r21, r25
		}

		// Overcurrent protection:
		if (!OVERCURRENT_TRIGGERED)
		{
			if (  ADC_CURRENT_SENSE_READ > OCUR_CENTRAL_PT+OVERCURRENT_THRESHOLD_ADC ||
 668:	24 17       	cp	r18, r20
 66a:	35 07       	cpc	r19, r21
 66c:	08 f0       	brcs	.+2      	; 0x670 <main+0xd4>
 66e:	4b c0       	rjmp	.+150    	; 0x706 <main+0x16a>
					ADC_CURRENT_SENSE_READ < OCUR_CENTRAL_PT-OVERCURRENT_THRESHOLD_ADC)
			{
				// Increase overcurrent timer counter:
				const uint32_t tim_now = getTimer_us();
 670:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_Z11getTimer_usv>
				if (tim_now!=OVERCURRENT_LAST_TRIGGERED_TIM) {
 674:	80 90 c8 01 	lds	r8, 0x01C8	; 0x8001c8 <OVERCURRENT_LAST_TRIGGERED_TIM>
 678:	90 90 c9 01 	lds	r9, 0x01C9	; 0x8001c9 <OVERCURRENT_LAST_TRIGGERED_TIM+0x1>
 67c:	a0 90 ca 01 	lds	r10, 0x01CA	; 0x8001ca <OVERCURRENT_LAST_TRIGGERED_TIM+0x2>
 680:	b0 90 cb 01 	lds	r11, 0x01CB	; 0x8001cb <OVERCURRENT_LAST_TRIGGERED_TIM+0x3>
 684:	68 15       	cp	r22, r8
 686:	79 05       	cpc	r23, r9
 688:	8a 05       	cpc	r24, r10
 68a:	9b 05       	cpc	r25, r11
 68c:	91 f0       	breq	.+36     	; 0x6b2 <main+0x116>
					++OVERCURRENT_ELLAPSED_100US;
 68e:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <OVERCURRENT_ELLAPSED_100US>
 692:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <OVERCURRENT_ELLAPSED_100US+0x1>
 696:	2f 5f       	subi	r18, 0xFF	; 255
 698:	3f 4f       	sbci	r19, 0xFF	; 255
 69a:	30 93 c7 01 	sts	0x01C7, r19	; 0x8001c7 <OVERCURRENT_ELLAPSED_100US+0x1>
 69e:	20 93 c6 01 	sts	0x01C6, r18	; 0x8001c6 <OVERCURRENT_ELLAPSED_100US>
					OVERCURRENT_LAST_TRIGGERED_TIM = tim_now;
 6a2:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <OVERCURRENT_LAST_TRIGGERED_TIM>
 6a6:	70 93 c9 01 	sts	0x01C9, r23	; 0x8001c9 <OVERCURRENT_LAST_TRIGGERED_TIM+0x1>
 6aa:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <OVERCURRENT_LAST_TRIGGERED_TIM+0x2>
 6ae:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <OVERCURRENT_LAST_TRIGGERED_TIM+0x3>
				}
				

				// If timer > limit: 
				if (OVERCURRENT_ELLAPSED_100US >= OVERCURRENT_TIME_THRESHOLD_MS * 10)
 6b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <OVERCURRENT_TIME_THRESHOLD_MS>
 6b6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <OVERCURRENT_TIME_THRESHOLD_MS+0x1>
 6ba:	9c 01       	movw	r18, r24
 6bc:	22 0f       	add	r18, r18
 6be:	33 1f       	adc	r19, r19
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	82 0f       	add	r24, r18
 6ce:	93 1f       	adc	r25, r19
 6d0:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <OVERCURRENT_ELLAPSED_100US>
 6d4:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <OVERCURRENT_ELLAPSED_100US+0x1>
 6d8:	28 17       	cp	r18, r24
 6da:	39 07       	cpc	r19, r25
 6dc:	08 f4       	brcc	.+2      	; 0x6e0 <main+0x144>
 6de:	93 cf       	rjmp	.-218    	; 0x606 <main+0x6a>
				{
					OVERCURRENT_TRIGGERED = true;
 6e0:	f0 92 cd 01 	sts	0x01CD, r15	; 0x8001cd <OVERCURRENT_TRIGGERED>
					// Store the sign of the PWM motion direction, so we can detect a change and reset the triggered flag:
					OVERCURRENT_PWM_POSITIVE_WHEN_TRIGGERED = (last_pwm_cmd>0);
 6e4:	8f 2d       	mov	r24, r15
 6e6:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
 6ea:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__data_end+0x1>
 6ee:	12 16       	cp	r1, r18
 6f0:	13 06       	cpc	r1, r19
 6f2:	0c f0       	brlt	.+2      	; 0x6f6 <main+0x15a>
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <OVERCURRENT_PWM_POSITIVE_WHEN_TRIGGERED>

					SetMotorPWM(0, false /* dont update sign of last pwm cmd */);
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 75 00 	call	0xea	; 0xea <_Z11SetMotorPWMib>
 704:	80 cf       	rjmp	.-256    	; 0x606 <main+0x6a>
				}
			}
			else
			{
				OVERCURRENT_ELLAPSED_100US = 0;
 706:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <OVERCURRENT_ELLAPSED_100US+0x1>
 70a:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <OVERCURRENT_ELLAPSED_100US>
 70e:	7b cf       	rjmp	.-266    	; 0x606 <main+0x6a>
			}
		}
		else
		{
			// We are in overcurrent protection:
			SetMotorPWM(0, false /* dont update sign of last pwm cmd */);
 710:	60 e0       	ldi	r22, 0x00	; 0
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 75 00 	call	0xea	; 0xea <_Z11SetMotorPWMib>
 71a:	75 cf       	rjmp	.-278    	; 0x606 <main+0x6a>

0000071c <_GLOBAL__sub_I_timer_us>:
	
	TEncoderRead():
	timestamp(0),
	ticks_incr(0),
	time_incr(0),
	ticks_acum(0)
 71c:	e6 eb       	ldi	r30, 0xB6	; 182
 71e:	f1 e0       	ldi	r31, 0x01	; 1
 720:	10 82       	st	Z, r1
 722:	11 82       	std	Z+1, r1	; 0x01
 724:	12 82       	std	Z+2, r1	; 0x02
 726:	13 82       	std	Z+3, r1	; 0x03
 728:	15 82       	std	Z+5, r1	; 0x05
 72a:	14 82       	std	Z+4, r1	; 0x04
 72c:	16 82       	std	Z+6, r1	; 0x06
 72e:	17 82       	std	Z+7, r1	; 0x07
 730:	10 86       	std	Z+8, r1	; 0x08
 732:	11 86       	std	Z+9, r1	; 0x09
 734:	12 86       	std	Z+10, r1	; 0x0a
 736:	13 86       	std	Z+11, r1	; 0x0b
 738:	14 86       	std	Z+12, r1	; 0x0c
 73a:	15 86       	std	Z+13, r1	; 0x0d
 73c:	08 95       	ret

0000073e <__divsf3>:
 73e:	0e 94 b3 03 	call	0x766	; 0x766 <__divsf3x>
 742:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_round>
 746:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fp_pscB>
 74a:	58 f0       	brcs	.+22     	; 0x762 <__divsf3+0x24>
 74c:	0e 94 49 04 	call	0x892	; 0x892 <__fp_pscA>
 750:	40 f0       	brcs	.+16     	; 0x762 <__divsf3+0x24>
 752:	29 f4       	brne	.+10     	; 0x75e <__divsf3+0x20>
 754:	5f 3f       	cpi	r21, 0xFF	; 255
 756:	29 f0       	breq	.+10     	; 0x762 <__divsf3+0x24>
 758:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_inf>
 75c:	51 11       	cpse	r21, r1
 75e:	0c 94 8b 04 	jmp	0x916	; 0x916 <__fp_szero>
 762:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_nan>

00000766 <__divsf3x>:
 766:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__fp_split3>
 76a:	68 f3       	brcs	.-38     	; 0x746 <__divsf3+0x8>

0000076c <__divsf3_pse>:
 76c:	99 23       	and	r25, r25
 76e:	b1 f3       	breq	.-20     	; 0x75c <__divsf3+0x1e>
 770:	55 23       	and	r21, r21
 772:	91 f3       	breq	.-28     	; 0x758 <__divsf3+0x1a>
 774:	95 1b       	sub	r25, r21
 776:	55 0b       	sbc	r21, r21
 778:	bb 27       	eor	r27, r27
 77a:	aa 27       	eor	r26, r26
 77c:	62 17       	cp	r22, r18
 77e:	73 07       	cpc	r23, r19
 780:	84 07       	cpc	r24, r20
 782:	38 f0       	brcs	.+14     	; 0x792 <__divsf3_pse+0x26>
 784:	9f 5f       	subi	r25, 0xFF	; 255
 786:	5f 4f       	sbci	r21, 0xFF	; 255
 788:	22 0f       	add	r18, r18
 78a:	33 1f       	adc	r19, r19
 78c:	44 1f       	adc	r20, r20
 78e:	aa 1f       	adc	r26, r26
 790:	a9 f3       	breq	.-22     	; 0x77c <__divsf3_pse+0x10>
 792:	35 d0       	rcall	.+106    	; 0x7fe <__divsf3_pse+0x92>
 794:	0e 2e       	mov	r0, r30
 796:	3a f0       	brmi	.+14     	; 0x7a6 <__divsf3_pse+0x3a>
 798:	e0 e8       	ldi	r30, 0x80	; 128
 79a:	32 d0       	rcall	.+100    	; 0x800 <__divsf3_pse+0x94>
 79c:	91 50       	subi	r25, 0x01	; 1
 79e:	50 40       	sbci	r21, 0x00	; 0
 7a0:	e6 95       	lsr	r30
 7a2:	00 1c       	adc	r0, r0
 7a4:	ca f7       	brpl	.-14     	; 0x798 <__divsf3_pse+0x2c>
 7a6:	2b d0       	rcall	.+86     	; 0x7fe <__divsf3_pse+0x92>
 7a8:	fe 2f       	mov	r31, r30
 7aa:	29 d0       	rcall	.+82     	; 0x7fe <__divsf3_pse+0x92>
 7ac:	66 0f       	add	r22, r22
 7ae:	77 1f       	adc	r23, r23
 7b0:	88 1f       	adc	r24, r24
 7b2:	bb 1f       	adc	r27, r27
 7b4:	26 17       	cp	r18, r22
 7b6:	37 07       	cpc	r19, r23
 7b8:	48 07       	cpc	r20, r24
 7ba:	ab 07       	cpc	r26, r27
 7bc:	b0 e8       	ldi	r27, 0x80	; 128
 7be:	09 f0       	breq	.+2      	; 0x7c2 <__divsf3_pse+0x56>
 7c0:	bb 0b       	sbc	r27, r27
 7c2:	80 2d       	mov	r24, r0
 7c4:	bf 01       	movw	r22, r30
 7c6:	ff 27       	eor	r31, r31
 7c8:	93 58       	subi	r25, 0x83	; 131
 7ca:	5f 4f       	sbci	r21, 0xFF	; 255
 7cc:	3a f0       	brmi	.+14     	; 0x7dc <__divsf3_pse+0x70>
 7ce:	9e 3f       	cpi	r25, 0xFE	; 254
 7d0:	51 05       	cpc	r21, r1
 7d2:	78 f0       	brcs	.+30     	; 0x7f2 <__divsf3_pse+0x86>
 7d4:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_inf>
 7d8:	0c 94 8b 04 	jmp	0x916	; 0x916 <__fp_szero>
 7dc:	5f 3f       	cpi	r21, 0xFF	; 255
 7de:	e4 f3       	brlt	.-8      	; 0x7d8 <__divsf3_pse+0x6c>
 7e0:	98 3e       	cpi	r25, 0xE8	; 232
 7e2:	d4 f3       	brlt	.-12     	; 0x7d8 <__divsf3_pse+0x6c>
 7e4:	86 95       	lsr	r24
 7e6:	77 95       	ror	r23
 7e8:	67 95       	ror	r22
 7ea:	b7 95       	ror	r27
 7ec:	f7 95       	ror	r31
 7ee:	9f 5f       	subi	r25, 0xFF	; 255
 7f0:	c9 f7       	brne	.-14     	; 0x7e4 <__divsf3_pse+0x78>
 7f2:	88 0f       	add	r24, r24
 7f4:	91 1d       	adc	r25, r1
 7f6:	96 95       	lsr	r25
 7f8:	87 95       	ror	r24
 7fa:	97 f9       	bld	r25, 7
 7fc:	08 95       	ret
 7fe:	e1 e0       	ldi	r30, 0x01	; 1
 800:	66 0f       	add	r22, r22
 802:	77 1f       	adc	r23, r23
 804:	88 1f       	adc	r24, r24
 806:	bb 1f       	adc	r27, r27
 808:	62 17       	cp	r22, r18
 80a:	73 07       	cpc	r23, r19
 80c:	84 07       	cpc	r24, r20
 80e:	ba 07       	cpc	r27, r26
 810:	20 f0       	brcs	.+8      	; 0x81a <__divsf3_pse+0xae>
 812:	62 1b       	sub	r22, r18
 814:	73 0b       	sbc	r23, r19
 816:	84 0b       	sbc	r24, r20
 818:	ba 0b       	sbc	r27, r26
 81a:	ee 1f       	adc	r30, r30
 81c:	88 f7       	brcc	.-30     	; 0x800 <__divsf3_pse+0x94>
 81e:	e0 95       	com	r30
 820:	08 95       	ret

00000822 <__fixunssfsi>:
 822:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__fp_splitA>
 826:	88 f0       	brcs	.+34     	; 0x84a <__fixunssfsi+0x28>
 828:	9f 57       	subi	r25, 0x7F	; 127
 82a:	98 f0       	brcs	.+38     	; 0x852 <__fixunssfsi+0x30>
 82c:	b9 2f       	mov	r27, r25
 82e:	99 27       	eor	r25, r25
 830:	b7 51       	subi	r27, 0x17	; 23
 832:	b0 f0       	brcs	.+44     	; 0x860 <__fixunssfsi+0x3e>
 834:	e1 f0       	breq	.+56     	; 0x86e <__fixunssfsi+0x4c>
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	1a f0       	brmi	.+6      	; 0x846 <__fixunssfsi+0x24>
 840:	ba 95       	dec	r27
 842:	c9 f7       	brne	.-14     	; 0x836 <__fixunssfsi+0x14>
 844:	14 c0       	rjmp	.+40     	; 0x86e <__fixunssfsi+0x4c>
 846:	b1 30       	cpi	r27, 0x01	; 1
 848:	91 f0       	breq	.+36     	; 0x86e <__fixunssfsi+0x4c>
 84a:	0e 94 8a 04 	call	0x914	; 0x914 <__fp_zero>
 84e:	b1 e0       	ldi	r27, 0x01	; 1
 850:	08 95       	ret
 852:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_zero>
 856:	67 2f       	mov	r22, r23
 858:	78 2f       	mov	r23, r24
 85a:	88 27       	eor	r24, r24
 85c:	b8 5f       	subi	r27, 0xF8	; 248
 85e:	39 f0       	breq	.+14     	; 0x86e <__fixunssfsi+0x4c>
 860:	b9 3f       	cpi	r27, 0xF9	; 249
 862:	cc f3       	brlt	.-14     	; 0x856 <__fixunssfsi+0x34>
 864:	86 95       	lsr	r24
 866:	77 95       	ror	r23
 868:	67 95       	ror	r22
 86a:	b3 95       	inc	r27
 86c:	d9 f7       	brne	.-10     	; 0x864 <__fixunssfsi+0x42>
 86e:	3e f4       	brtc	.+14     	; 0x87e <__fixunssfsi+0x5c>
 870:	90 95       	com	r25
 872:	80 95       	com	r24
 874:	70 95       	com	r23
 876:	61 95       	neg	r22
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	8f 4f       	sbci	r24, 0xFF	; 255
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	08 95       	ret

00000880 <__fp_inf>:
 880:	97 f9       	bld	r25, 7
 882:	9f 67       	ori	r25, 0x7F	; 127
 884:	80 e8       	ldi	r24, 0x80	; 128
 886:	70 e0       	ldi	r23, 0x00	; 0
 888:	60 e0       	ldi	r22, 0x00	; 0
 88a:	08 95       	ret

0000088c <__fp_nan>:
 88c:	9f ef       	ldi	r25, 0xFF	; 255
 88e:	80 ec       	ldi	r24, 0xC0	; 192
 890:	08 95       	ret

00000892 <__fp_pscA>:
 892:	00 24       	eor	r0, r0
 894:	0a 94       	dec	r0
 896:	16 16       	cp	r1, r22
 898:	17 06       	cpc	r1, r23
 89a:	18 06       	cpc	r1, r24
 89c:	09 06       	cpc	r0, r25
 89e:	08 95       	ret

000008a0 <__fp_pscB>:
 8a0:	00 24       	eor	r0, r0
 8a2:	0a 94       	dec	r0
 8a4:	12 16       	cp	r1, r18
 8a6:	13 06       	cpc	r1, r19
 8a8:	14 06       	cpc	r1, r20
 8aa:	05 06       	cpc	r0, r21
 8ac:	08 95       	ret

000008ae <__fp_round>:
 8ae:	09 2e       	mov	r0, r25
 8b0:	03 94       	inc	r0
 8b2:	00 0c       	add	r0, r0
 8b4:	11 f4       	brne	.+4      	; 0x8ba <__fp_round+0xc>
 8b6:	88 23       	and	r24, r24
 8b8:	52 f0       	brmi	.+20     	; 0x8ce <__fp_round+0x20>
 8ba:	bb 0f       	add	r27, r27
 8bc:	40 f4       	brcc	.+16     	; 0x8ce <__fp_round+0x20>
 8be:	bf 2b       	or	r27, r31
 8c0:	11 f4       	brne	.+4      	; 0x8c6 <__fp_round+0x18>
 8c2:	60 ff       	sbrs	r22, 0
 8c4:	04 c0       	rjmp	.+8      	; 0x8ce <__fp_round+0x20>
 8c6:	6f 5f       	subi	r22, 0xFF	; 255
 8c8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ca:	8f 4f       	sbci	r24, 0xFF	; 255
 8cc:	9f 4f       	sbci	r25, 0xFF	; 255
 8ce:	08 95       	ret

000008d0 <__fp_split3>:
 8d0:	57 fd       	sbrc	r21, 7
 8d2:	90 58       	subi	r25, 0x80	; 128
 8d4:	44 0f       	add	r20, r20
 8d6:	55 1f       	adc	r21, r21
 8d8:	59 f0       	breq	.+22     	; 0x8f0 <__fp_splitA+0x10>
 8da:	5f 3f       	cpi	r21, 0xFF	; 255
 8dc:	71 f0       	breq	.+28     	; 0x8fa <__fp_splitA+0x1a>
 8de:	47 95       	ror	r20

000008e0 <__fp_splitA>:
 8e0:	88 0f       	add	r24, r24
 8e2:	97 fb       	bst	r25, 7
 8e4:	99 1f       	adc	r25, r25
 8e6:	61 f0       	breq	.+24     	; 0x900 <__stack+0x1>
 8e8:	9f 3f       	cpi	r25, 0xFF	; 255
 8ea:	79 f0       	breq	.+30     	; 0x90a <__stack+0xb>
 8ec:	87 95       	ror	r24
 8ee:	08 95       	ret
 8f0:	12 16       	cp	r1, r18
 8f2:	13 06       	cpc	r1, r19
 8f4:	14 06       	cpc	r1, r20
 8f6:	55 1f       	adc	r21, r21
 8f8:	f2 cf       	rjmp	.-28     	; 0x8de <__fp_split3+0xe>
 8fa:	46 95       	lsr	r20
 8fc:	f1 df       	rcall	.-30     	; 0x8e0 <__fp_splitA>
 8fe:	08 c0       	rjmp	.+16     	; 0x910 <__stack+0x11>
 900:	16 16       	cp	r1, r22
 902:	17 06       	cpc	r1, r23
 904:	18 06       	cpc	r1, r24
 906:	99 1f       	adc	r25, r25
 908:	f1 cf       	rjmp	.-30     	; 0x8ec <__fp_splitA+0xc>
 90a:	86 95       	lsr	r24
 90c:	71 05       	cpc	r23, r1
 90e:	61 05       	cpc	r22, r1
 910:	08 94       	sec
 912:	08 95       	ret

00000914 <__fp_zero>:
 914:	e8 94       	clt

00000916 <__fp_szero>:
 916:	bb 27       	eor	r27, r27
 918:	66 27       	eor	r22, r22
 91a:	77 27       	eor	r23, r23
 91c:	cb 01       	movw	r24, r22
 91e:	97 f9       	bld	r25, 7
 920:	08 95       	ret

00000922 <__mulsf3>:
 922:	0e 94 a4 04 	call	0x948	; 0x948 <__mulsf3x>
 926:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_round>
 92a:	0e 94 49 04 	call	0x892	; 0x892 <__fp_pscA>
 92e:	38 f0       	brcs	.+14     	; 0x93e <__mulsf3+0x1c>
 930:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fp_pscB>
 934:	20 f0       	brcs	.+8      	; 0x93e <__mulsf3+0x1c>
 936:	95 23       	and	r25, r21
 938:	11 f0       	breq	.+4      	; 0x93e <__mulsf3+0x1c>
 93a:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_inf>
 93e:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_nan>
 942:	11 24       	eor	r1, r1
 944:	0c 94 8b 04 	jmp	0x916	; 0x916 <__fp_szero>

00000948 <__mulsf3x>:
 948:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__fp_split3>
 94c:	70 f3       	brcs	.-36     	; 0x92a <__mulsf3+0x8>

0000094e <__mulsf3_pse>:
 94e:	95 9f       	mul	r25, r21
 950:	c1 f3       	breq	.-16     	; 0x942 <__mulsf3+0x20>
 952:	95 0f       	add	r25, r21
 954:	50 e0       	ldi	r21, 0x00	; 0
 956:	55 1f       	adc	r21, r21
 958:	62 9f       	mul	r22, r18
 95a:	f0 01       	movw	r30, r0
 95c:	72 9f       	mul	r23, r18
 95e:	bb 27       	eor	r27, r27
 960:	f0 0d       	add	r31, r0
 962:	b1 1d       	adc	r27, r1
 964:	63 9f       	mul	r22, r19
 966:	aa 27       	eor	r26, r26
 968:	f0 0d       	add	r31, r0
 96a:	b1 1d       	adc	r27, r1
 96c:	aa 1f       	adc	r26, r26
 96e:	64 9f       	mul	r22, r20
 970:	66 27       	eor	r22, r22
 972:	b0 0d       	add	r27, r0
 974:	a1 1d       	adc	r26, r1
 976:	66 1f       	adc	r22, r22
 978:	82 9f       	mul	r24, r18
 97a:	22 27       	eor	r18, r18
 97c:	b0 0d       	add	r27, r0
 97e:	a1 1d       	adc	r26, r1
 980:	62 1f       	adc	r22, r18
 982:	73 9f       	mul	r23, r19
 984:	b0 0d       	add	r27, r0
 986:	a1 1d       	adc	r26, r1
 988:	62 1f       	adc	r22, r18
 98a:	83 9f       	mul	r24, r19
 98c:	a0 0d       	add	r26, r0
 98e:	61 1d       	adc	r22, r1
 990:	22 1f       	adc	r18, r18
 992:	74 9f       	mul	r23, r20
 994:	33 27       	eor	r19, r19
 996:	a0 0d       	add	r26, r0
 998:	61 1d       	adc	r22, r1
 99a:	23 1f       	adc	r18, r19
 99c:	84 9f       	mul	r24, r20
 99e:	60 0d       	add	r22, r0
 9a0:	21 1d       	adc	r18, r1
 9a2:	82 2f       	mov	r24, r18
 9a4:	76 2f       	mov	r23, r22
 9a6:	6a 2f       	mov	r22, r26
 9a8:	11 24       	eor	r1, r1
 9aa:	9f 57       	subi	r25, 0x7F	; 127
 9ac:	50 40       	sbci	r21, 0x00	; 0
 9ae:	9a f0       	brmi	.+38     	; 0x9d6 <__mulsf3_pse+0x88>
 9b0:	f1 f0       	breq	.+60     	; 0x9ee <__mulsf3_pse+0xa0>
 9b2:	88 23       	and	r24, r24
 9b4:	4a f0       	brmi	.+18     	; 0x9c8 <__mulsf3_pse+0x7a>
 9b6:	ee 0f       	add	r30, r30
 9b8:	ff 1f       	adc	r31, r31
 9ba:	bb 1f       	adc	r27, r27
 9bc:	66 1f       	adc	r22, r22
 9be:	77 1f       	adc	r23, r23
 9c0:	88 1f       	adc	r24, r24
 9c2:	91 50       	subi	r25, 0x01	; 1
 9c4:	50 40       	sbci	r21, 0x00	; 0
 9c6:	a9 f7       	brne	.-22     	; 0x9b2 <__mulsf3_pse+0x64>
 9c8:	9e 3f       	cpi	r25, 0xFE	; 254
 9ca:	51 05       	cpc	r21, r1
 9cc:	80 f0       	brcs	.+32     	; 0x9ee <__mulsf3_pse+0xa0>
 9ce:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_inf>
 9d2:	0c 94 8b 04 	jmp	0x916	; 0x916 <__fp_szero>
 9d6:	5f 3f       	cpi	r21, 0xFF	; 255
 9d8:	e4 f3       	brlt	.-8      	; 0x9d2 <__mulsf3_pse+0x84>
 9da:	98 3e       	cpi	r25, 0xE8	; 232
 9dc:	d4 f3       	brlt	.-12     	; 0x9d2 <__mulsf3_pse+0x84>
 9de:	86 95       	lsr	r24
 9e0:	77 95       	ror	r23
 9e2:	67 95       	ror	r22
 9e4:	b7 95       	ror	r27
 9e6:	f7 95       	ror	r31
 9e8:	e7 95       	ror	r30
 9ea:	9f 5f       	subi	r25, 0xFF	; 255
 9ec:	c1 f7       	brne	.-16     	; 0x9de <__mulsf3_pse+0x90>
 9ee:	fe 2b       	or	r31, r30
 9f0:	88 0f       	add	r24, r24
 9f2:	91 1d       	adc	r25, r1
 9f4:	96 95       	lsr	r25
 9f6:	87 95       	ror	r24
 9f8:	97 f9       	bld	r25, 7
 9fa:	08 95       	ret

000009fc <__moddi3>:
 9fc:	68 94       	set
 9fe:	01 c0       	rjmp	.+2      	; 0xa02 <__divdi3_moddi3>

00000a00 <__divdi3>:
 a00:	e8 94       	clt

00000a02 <__divdi3_moddi3>:
 a02:	f9 2f       	mov	r31, r25
 a04:	f1 2b       	or	r31, r17
 a06:	12 f0       	brmi	.+4      	; 0xa0c <__divdi3_moddi3+0xa>
 a08:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__udivdi3_umoddi3>
 a0c:	a0 e0       	ldi	r26, 0x00	; 0
 a0e:	b0 e0       	ldi	r27, 0x00	; 0
 a10:	ec e0       	ldi	r30, 0x0C	; 12
 a12:	f5 e0       	ldi	r31, 0x05	; 5
 a14:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__prologue_saves__+0xc>
 a18:	09 2e       	mov	r0, r25
 a1a:	05 94       	asr	r0
 a1c:	22 f4       	brpl	.+8      	; 0xa26 <__divdi3_moddi3+0x24>
 a1e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__negdi2>
 a22:	11 23       	and	r17, r17
 a24:	92 f4       	brpl	.+36     	; 0xa4a <__divdi3_moddi3+0x48>
 a26:	f0 e8       	ldi	r31, 0x80	; 128
 a28:	0f 26       	eor	r0, r31
 a2a:	ff ef       	ldi	r31, 0xFF	; 255
 a2c:	e0 94       	com	r14
 a2e:	f0 94       	com	r15
 a30:	00 95       	com	r16
 a32:	10 95       	com	r17
 a34:	b0 94       	com	r11
 a36:	c0 94       	com	r12
 a38:	d0 94       	com	r13
 a3a:	a1 94       	neg	r10
 a3c:	bf 0a       	sbc	r11, r31
 a3e:	cf 0a       	sbc	r12, r31
 a40:	df 0a       	sbc	r13, r31
 a42:	ef 0a       	sbc	r14, r31
 a44:	ff 0a       	sbc	r15, r31
 a46:	0f 0b       	sbc	r16, r31
 a48:	1f 0b       	sbc	r17, r31
 a4a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__udivmod64>
 a4e:	07 fc       	sbrc	r0, 7
 a50:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__negdi2>
 a54:	cd b7       	in	r28, 0x3d	; 61
 a56:	de b7       	in	r29, 0x3e	; 62
 a58:	ec e0       	ldi	r30, 0x0C	; 12
 a5a:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__epilogue_restores__+0xc>

00000a5e <__umoddi3>:
 a5e:	68 94       	set
 a60:	01 c0       	rjmp	.+2      	; 0xa64 <__udivdi3_umoddi3>

00000a62 <__udivdi3>:
 a62:	e8 94       	clt

00000a64 <__udivdi3_umoddi3>:
 a64:	8f 92       	push	r8
 a66:	9f 92       	push	r9
 a68:	cf 93       	push	r28
 a6a:	df 93       	push	r29
 a6c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__udivmod64>
 a70:	df 91       	pop	r29
 a72:	cf 91       	pop	r28
 a74:	9f 90       	pop	r9
 a76:	8f 90       	pop	r8
 a78:	08 95       	ret

00000a7a <__udivmod64>:
 a7a:	88 24       	eor	r8, r8
 a7c:	99 24       	eor	r9, r9
 a7e:	f4 01       	movw	r30, r8
 a80:	e4 01       	movw	r28, r8
 a82:	b0 e4       	ldi	r27, 0x40	; 64
 a84:	9f 93       	push	r25
 a86:	aa 27       	eor	r26, r26
 a88:	9a 15       	cp	r25, r10
 a8a:	8b 04       	cpc	r8, r11
 a8c:	9c 04       	cpc	r9, r12
 a8e:	ed 05       	cpc	r30, r13
 a90:	fe 05       	cpc	r31, r14
 a92:	cf 05       	cpc	r28, r15
 a94:	d0 07       	cpc	r29, r16
 a96:	a1 07       	cpc	r26, r17
 a98:	98 f4       	brcc	.+38     	; 0xac0 <__udivmod64+0x46>
 a9a:	ad 2f       	mov	r26, r29
 a9c:	dc 2f       	mov	r29, r28
 a9e:	cf 2f       	mov	r28, r31
 aa0:	fe 2f       	mov	r31, r30
 aa2:	e9 2d       	mov	r30, r9
 aa4:	98 2c       	mov	r9, r8
 aa6:	89 2e       	mov	r8, r25
 aa8:	98 2f       	mov	r25, r24
 aaa:	87 2f       	mov	r24, r23
 aac:	76 2f       	mov	r23, r22
 aae:	65 2f       	mov	r22, r21
 ab0:	54 2f       	mov	r21, r20
 ab2:	43 2f       	mov	r20, r19
 ab4:	32 2f       	mov	r19, r18
 ab6:	22 27       	eor	r18, r18
 ab8:	b8 50       	subi	r27, 0x08	; 8
 aba:	31 f7       	brne	.-52     	; 0xa88 <__udivmod64+0xe>
 abc:	bf 91       	pop	r27
 abe:	27 c0       	rjmp	.+78     	; 0xb0e <__udivmod64+0x94>
 ac0:	1b 2e       	mov	r1, r27
 ac2:	bf 91       	pop	r27
 ac4:	bb 27       	eor	r27, r27
 ac6:	22 0f       	add	r18, r18
 ac8:	33 1f       	adc	r19, r19
 aca:	44 1f       	adc	r20, r20
 acc:	55 1f       	adc	r21, r21
 ace:	66 1f       	adc	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	99 1f       	adc	r25, r25
 ad6:	88 1c       	adc	r8, r8
 ad8:	99 1c       	adc	r9, r9
 ada:	ee 1f       	adc	r30, r30
 adc:	ff 1f       	adc	r31, r31
 ade:	cc 1f       	adc	r28, r28
 ae0:	dd 1f       	adc	r29, r29
 ae2:	aa 1f       	adc	r26, r26
 ae4:	bb 1f       	adc	r27, r27
 ae6:	8a 14       	cp	r8, r10
 ae8:	9b 04       	cpc	r9, r11
 aea:	ec 05       	cpc	r30, r12
 aec:	fd 05       	cpc	r31, r13
 aee:	ce 05       	cpc	r28, r14
 af0:	df 05       	cpc	r29, r15
 af2:	a0 07       	cpc	r26, r16
 af4:	b1 07       	cpc	r27, r17
 af6:	48 f0       	brcs	.+18     	; 0xb0a <__udivmod64+0x90>
 af8:	8a 18       	sub	r8, r10
 afa:	9b 08       	sbc	r9, r11
 afc:	ec 09       	sbc	r30, r12
 afe:	fd 09       	sbc	r31, r13
 b00:	ce 09       	sbc	r28, r14
 b02:	df 09       	sbc	r29, r15
 b04:	a0 0b       	sbc	r26, r16
 b06:	b1 0b       	sbc	r27, r17
 b08:	21 60       	ori	r18, 0x01	; 1
 b0a:	1a 94       	dec	r1
 b0c:	e1 f6       	brne	.-72     	; 0xac6 <__udivmod64+0x4c>
 b0e:	2e f4       	brtc	.+10     	; 0xb1a <__udivmod64+0xa0>
 b10:	94 01       	movw	r18, r8
 b12:	af 01       	movw	r20, r30
 b14:	be 01       	movw	r22, r28
 b16:	cd 01       	movw	r24, r26
 b18:	00 0c       	add	r0, r0
 b1a:	08 95       	ret

00000b1c <__negdi2>:
 b1c:	60 95       	com	r22
 b1e:	70 95       	com	r23
 b20:	80 95       	com	r24
 b22:	90 95       	com	r25
 b24:	30 95       	com	r19
 b26:	40 95       	com	r20
 b28:	50 95       	com	r21
 b2a:	21 95       	neg	r18
 b2c:	3f 4f       	sbci	r19, 0xFF	; 255
 b2e:	4f 4f       	sbci	r20, 0xFF	; 255
 b30:	5f 4f       	sbci	r21, 0xFF	; 255
 b32:	6f 4f       	sbci	r22, 0xFF	; 255
 b34:	7f 4f       	sbci	r23, 0xFF	; 255
 b36:	8f 4f       	sbci	r24, 0xFF	; 255
 b38:	9f 4f       	sbci	r25, 0xFF	; 255
 b3a:	08 95       	ret

00000b3c <__prologue_saves__>:
 b3c:	2f 92       	push	r2
 b3e:	3f 92       	push	r3
 b40:	4f 92       	push	r4
 b42:	5f 92       	push	r5
 b44:	6f 92       	push	r6
 b46:	7f 92       	push	r7
 b48:	8f 92       	push	r8
 b4a:	9f 92       	push	r9
 b4c:	af 92       	push	r10
 b4e:	bf 92       	push	r11
 b50:	cf 92       	push	r12
 b52:	df 92       	push	r13
 b54:	ef 92       	push	r14
 b56:	ff 92       	push	r15
 b58:	0f 93       	push	r16
 b5a:	1f 93       	push	r17
 b5c:	cf 93       	push	r28
 b5e:	df 93       	push	r29
 b60:	cd b7       	in	r28, 0x3d	; 61
 b62:	de b7       	in	r29, 0x3e	; 62
 b64:	ca 1b       	sub	r28, r26
 b66:	db 0b       	sbc	r29, r27
 b68:	0f b6       	in	r0, 0x3f	; 63
 b6a:	f8 94       	cli
 b6c:	de bf       	out	0x3e, r29	; 62
 b6e:	0f be       	out	0x3f, r0	; 63
 b70:	cd bf       	out	0x3d, r28	; 61
 b72:	09 94       	ijmp

00000b74 <__epilogue_restores__>:
 b74:	2a 88       	ldd	r2, Y+18	; 0x12
 b76:	39 88       	ldd	r3, Y+17	; 0x11
 b78:	48 88       	ldd	r4, Y+16	; 0x10
 b7a:	5f 84       	ldd	r5, Y+15	; 0x0f
 b7c:	6e 84       	ldd	r6, Y+14	; 0x0e
 b7e:	7d 84       	ldd	r7, Y+13	; 0x0d
 b80:	8c 84       	ldd	r8, Y+12	; 0x0c
 b82:	9b 84       	ldd	r9, Y+11	; 0x0b
 b84:	aa 84       	ldd	r10, Y+10	; 0x0a
 b86:	b9 84       	ldd	r11, Y+9	; 0x09
 b88:	c8 84       	ldd	r12, Y+8	; 0x08
 b8a:	df 80       	ldd	r13, Y+7	; 0x07
 b8c:	ee 80       	ldd	r14, Y+6	; 0x06
 b8e:	fd 80       	ldd	r15, Y+5	; 0x05
 b90:	0c 81       	ldd	r16, Y+4	; 0x04
 b92:	1b 81       	ldd	r17, Y+3	; 0x03
 b94:	aa 81       	ldd	r26, Y+2	; 0x02
 b96:	b9 81       	ldd	r27, Y+1	; 0x01
 b98:	ce 0f       	add	r28, r30
 b9a:	d1 1d       	adc	r29, r1
 b9c:	0f b6       	in	r0, 0x3f	; 63
 b9e:	f8 94       	cli
 ba0:	de bf       	out	0x3e, r29	; 62
 ba2:	0f be       	out	0x3f, r0	; 63
 ba4:	cd bf       	out	0x3d, r28	; 61
 ba6:	ed 01       	movw	r28, r26
 ba8:	08 95       	ret

00000baa <__ashldi3>:
 baa:	0f 93       	push	r16
 bac:	08 30       	cpi	r16, 0x08	; 8
 bae:	90 f0       	brcs	.+36     	; 0xbd4 <__ashldi3+0x2a>
 bb0:	98 2f       	mov	r25, r24
 bb2:	87 2f       	mov	r24, r23
 bb4:	76 2f       	mov	r23, r22
 bb6:	65 2f       	mov	r22, r21
 bb8:	54 2f       	mov	r21, r20
 bba:	43 2f       	mov	r20, r19
 bbc:	32 2f       	mov	r19, r18
 bbe:	22 27       	eor	r18, r18
 bc0:	08 50       	subi	r16, 0x08	; 8
 bc2:	f4 cf       	rjmp	.-24     	; 0xbac <__ashldi3+0x2>
 bc4:	22 0f       	add	r18, r18
 bc6:	33 1f       	adc	r19, r19
 bc8:	44 1f       	adc	r20, r20
 bca:	55 1f       	adc	r21, r21
 bcc:	66 1f       	adc	r22, r22
 bce:	77 1f       	adc	r23, r23
 bd0:	88 1f       	adc	r24, r24
 bd2:	99 1f       	adc	r25, r25
 bd4:	0a 95       	dec	r16
 bd6:	b2 f7       	brpl	.-20     	; 0xbc4 <__ashldi3+0x1a>
 bd8:	0f 91       	pop	r16
 bda:	08 95       	ret

00000bdc <__subdi3>:
 bdc:	2a 19       	sub	r18, r10
 bde:	3b 09       	sbc	r19, r11
 be0:	4c 09       	sbc	r20, r12
 be2:	5d 09       	sbc	r21, r13
 be4:	6e 09       	sbc	r22, r14
 be6:	7f 09       	sbc	r23, r15
 be8:	80 0b       	sbc	r24, r16
 bea:	91 0b       	sbc	r25, r17
 bec:	08 95       	ret

00000bee <__tablejump2__>:
 bee:	ee 0f       	add	r30, r30
 bf0:	ff 1f       	adc	r31, r31
 bf2:	05 90       	lpm	r0, Z+
 bf4:	f4 91       	lpm	r31, Z
 bf6:	e0 2d       	mov	r30, r0
 bf8:	09 94       	ijmp

00000bfa <_exit>:
 bfa:	f8 94       	cli

00000bfc <__stop_program>:
 bfc:	ff cf       	rjmp	.-2      	; 0xbfc <__stop_program>
