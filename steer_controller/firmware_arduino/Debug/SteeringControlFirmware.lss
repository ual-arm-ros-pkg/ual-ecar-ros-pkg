
SteeringControlFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00000c26  00000cba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  00800172  00800172  00000d2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b20  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000daa  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a45  00000000  00000000  00003796  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  000041dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ca4  00000000  00000000  00004508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aec  00000000  00000000  000051ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	2c 01       	movw	r4, r24
  6a:	a2 03       	fmuls	r18, r18

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e6 e2       	ldi	r30, 0x26	; 38
  80:	fc e0       	ldi	r31, 0x0C	; 12
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a2 37       	cpi	r26, 0x72	; 114
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	22 e0       	ldi	r18, 0x02	; 2
  90:	a2 e7       	ldi	r26, 0x72	; 114
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c6 e3       	ldi	r28, 0x36	; 54
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 0b 06 	call	0xc16	; 0xc16 <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <main>
  b8:	0c 94 11 06 	jmp	0xc22	; 0xc22 <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_Z7InitPWMv>:

/* sets up microprocessor for PWM control of motors */
void InitPWM()
{
// Setup Timer
  TCNT1 = 0;
  c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  TCCR1A =  (0 << COM1A1) | // Set for normal mode for now, macros above change it for directions.
            (0 << COM1A0) |
            (0 << COM1B1) |
            (0 << COM1B0) |
            (1 << WGM11) |
            (1 << WGM10); // Fast PWM, (10+12 = 8bit, 10+11+12 = 10bit)
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
            (0 << ICES1) |
            (0 << WGM13) |
            (1 << WGM12) |
            (0 << CS12) |
            (0 << CS11) |  // Prescaler 000 = off, 10 = no prescale, 11 = 8, 10+11 = 64, 12 = 256, 12+10 = 1024 12+11+x = external clock.(x determins rising/falling edge)
            (1 << CS10);
  ce:	89 e0       	ldi	r24, 0x09	; 9
  d0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

  TCCR1C = 0x00;  // Set the Force bits to 0 for PWM modes.
  d4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
            //(0 << OCIE1A) | // Output Compare A Match Interrupt Enable
            //(0 << TOIE1); // Timer 1 Overflow interrupt enable
//
  /* set up ports */
  //SetupLPWM();
  SetupRPWM();
  d8:	21 9a       	sbi	0x04, 1	; 4
  da:	3d 9a       	sbi	0x07, 5	; 7
  
  // 
  sbi(DDRB, DDB2); 
  dc:	22 9a       	sbi	0x04, 2	; 4
  sbi(PORTB, PORTB2);
  de:	2a 9a       	sbi	0x05, 2	; 5

  /* OCR1A/B are the values that the timer is compared to; a match will
     cause the output to change; small values mean the motor runs for a
     short period (slower); larger values are longer times (faster)*/
  //lPWM = 
  rPWM = 0;	// (value is irrelevant since outputs are disconnected)
  e0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  e8:	08 95       	ret

000000ea <_Z11SetMotorPWMib>:

/* pwm values can range from -255 (full-speed reverse)
   to 255 (full-speed forward), with 0 indicating a stop */
void SetMotorPWM(int pwm, bool update_last_cmd)
{
	if (update_last_cmd) {
  ea:	66 23       	and	r22, r22
  ec:	21 f0       	breq	.+8      	; 0xf6 <_Z11SetMotorPWMib+0xc>
		last_pwm_cmd = pwm;
  ee:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
  f2:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	}

  if (pwm == 0)
  f6:	00 97       	sbiw	r24, 0x00	; 0
  f8:	51 f4       	brne	.+20     	; 0x10e <_Z11SetMotorPWMib+0x24>
  {
    RStop();
  fa:	45 98       	cbi	0x08, 5	; 8
  fc:	e0 e8       	ldi	r30, 0x80	; 128
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8f 77       	andi	r24, 0x7F	; 127
 104:	80 83       	st	Z, r24
 106:	80 81       	ld	r24, Z
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret
  }
  else
  {
    if (pwm >= 0)
 10e:	99 23       	and	r25, r25
 110:	54 f0       	brlt	.+20     	; 0x126 <_Z11SetMotorPWMib+0x3c>
    {
      RFwd();
 112:	45 98       	cbi	0x08, 5	; 8
 114:	e0 e8       	ldi	r30, 0x80	; 128
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	20 81       	ld	r18, Z
 11a:	20 68       	ori	r18, 0x80	; 128
 11c:	20 83       	st	Z, r18
 11e:	20 81       	ld	r18, Z
 120:	2f 7b       	andi	r18, 0xBF	; 191
 122:	20 83       	st	Z, r18
 124:	0c c0       	rjmp	.+24     	; 0x13e <_Z11SetMotorPWMib+0x54>
    }
    else
    {
      RRev();
 126:	45 9a       	sbi	0x08, 5	; 8
 128:	e0 e8       	ldi	r30, 0x80	; 128
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	20 81       	ld	r18, Z
 12e:	20 68       	ori	r18, 0x80	; 128
 130:	20 83       	st	Z, r18
 132:	20 81       	ld	r18, Z
 134:	2f 7b       	andi	r18, 0xBF	; 191
 136:	20 83       	st	Z, r18
      pwm = -pwm;
 138:	91 95       	neg	r25
 13a:	81 95       	neg	r24
 13c:	91 09       	sbc	r25, r1
 13e:	81 15       	cp	r24, r1
 140:	24 e0       	ldi	r18, 0x04	; 4
 142:	92 07       	cpc	r25, r18
 144:	14 f0       	brlt	.+4      	; 0x14a <_Z11SetMotorPWMib+0x60>
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	93 e0       	ldi	r25, 0x03	; 3
    }
    if (pwm > 1023)
      pwm = 1023;
    rPWM = pwm;		// set width for PWM
 14a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 14e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 152:	08 95       	ret

00000154 <_Z12set_relay_onv>:
}


void set_relay_on()
{
	sbi(DDRD,DDD3);
 154:	53 9a       	sbi	0x0a, 3	; 10
	cbi(PORTD,PORTD3);	
 156:	5b 98       	cbi	0x0b, 3	; 11
 158:	08 95       	ret

0000015a <_Z13set_relay_offv>:
}	

void set_relay_off()
{
	sbi(DDRD,DDD3);
 15a:	53 9a       	sbi	0x0a, 3	; 10
	sbi(PORTD,PORTD3);
 15c:	5b 9a       	sbi	0x0b, 3	; 11
 15e:	08 95       	ret

00000160 <_Z15process_commandPKhj>:

/** Process a command from the PC and send any required response back.
  * \return false on error, unknown command, etc.
  */
bool process_command(const uint8_t *cmd, const uint16_t cmd_len)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
	switch (cmd[0])
 166:	98 81       	ld	r25, Y
 168:	92 30       	cpi	r25, 0x02	; 2
 16a:	09 f4       	brne	.+2      	; 0x16e <_Z15process_commandPKhj+0xe>
 16c:	40 c0       	rjmp	.+128    	; 0x1ee <_Z15process_commandPKhj+0x8e>
 16e:	28 f4       	brcc	.+10     	; 0x17a <_Z15process_commandPKhj+0x1a>
 170:	99 23       	and	r25, r25
 172:	59 f0       	breq	.+22     	; 0x18a <_Z15process_commandPKhj+0x2a>
 174:	91 30       	cpi	r25, 0x01	; 1
 176:	b1 f0       	breq	.+44     	; 0x1a4 <_Z15process_commandPKhj+0x44>
 178:	6b c0       	rjmp	.+214    	; 0x250 <_Z15process_commandPKhj+0xf0>
 17a:	94 30       	cpi	r25, 0x04	; 4
 17c:	09 f4       	brne	.+2      	; 0x180 <_Z15process_commandPKhj+0x20>
 17e:	5b c0       	rjmp	.+182    	; 0x236 <_Z15process_commandPKhj+0xd6>
 180:	08 f4       	brcc	.+2      	; 0x184 <_Z15process_commandPKhj+0x24>
 182:	50 c0       	rjmp	.+160    	; 0x224 <_Z15process_commandPKhj+0xc4>
 184:	95 30       	cpi	r25, 0x05	; 5
 186:	b1 f0       	breq	.+44     	; 0x1b4 <_Z15process_commandPKhj+0x54>
 188:	63 c0       	rjmp	.+198    	; 0x250 <_Z15process_commandPKhj+0xf0>
	{
	case CMD_SET_CLUTCH:
		{
			const TCmdSetClutch *frame = (TCmdSetClutch*)cmd;
			if (frame->relay_state)
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	88 23       	and	r24, r24
 18e:	29 f0       	breq	.+10     	; 0x19a <_Z15process_commandPKhj+0x3a>
			{
				set_relay_on();
 190:	0e 94 aa 00 	call	0x154	; 0x154 <_Z12set_relay_onv>
				LED_ON(6);
 194:	56 9a       	sbi	0x0a, 6	; 10
 196:	5e 98       	cbi	0x0b, 6	; 11
 198:	5b c0       	rjmp	.+182    	; 0x250 <_Z15process_commandPKhj+0xf0>
			}					
			else
			{
				set_relay_off();
 19a:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z13set_relay_offv>
				LED_OFF(6);
 19e:	56 9a       	sbi	0x0a, 6	; 10
 1a0:	5e 9a       	sbi	0x0b, 6	; 11
 1a2:	56 c0       	rjmp	.+172    	; 0x250 <_Z15process_commandPKhj+0xf0>
		}
		break;
	case CMD_SET_AUTO_MODE:
	{
		const TCmdSetAutoMode *frame = (TCmdSetAutoMode*)cmd;
		firm_params.ENABLE_POS_CONTROL = frame->enable_pos_control ? 1:0;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	99 81       	ldd	r25, Y+1	; 0x01
 1a8:	91 11       	cpse	r25, r1
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <_Z15process_commandPKhj+0x4e>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <firm_params>
	}
	break;
 1b2:	4e c0       	rjmp	.+156    	; 0x250 <_Z15process_commandPKhj+0xf0>

	case CMD_SET_OVERCURRENT_THRESHOLD:
	{
		const TCmdSetOvercurrentThreshold *frame = (TCmdSetOvercurrentThreshold*)cmd;
		OVERCURRENT_THRESHOLD_ADC = (uint16_t)( frame->threshold_volt * 1024 / 5.0f);
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	40 e8       	ldi	r20, 0x80	; 128
 1ba:	54 e4       	ldi	r21, 0x44	; 68
 1bc:	69 81       	ldd	r22, Y+1	; 0x01
 1be:	7a 81       	ldd	r23, Y+2	; 0x02
 1c0:	8b 81       	ldd	r24, Y+3	; 0x03
 1c2:	9c 81       	ldd	r25, Y+4	; 0x04
 1c4:	0e 94 a5 04 	call	0x94a	; 0x94a <__mulsf3>
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	40 ea       	ldi	r20, 0xA0	; 160
 1ce:	50 e4       	ldi	r21, 0x40	; 64
 1d0:	0e 94 b3 03 	call	0x766	; 0x766 <__divsf3>
 1d4:	0e 94 25 04 	call	0x84a	; 0x84a <__fixunssfsi>
 1d8:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <OVERCURRENT_THRESHOLD_ADC+0x1>
 1dc:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <OVERCURRENT_THRESHOLD_ADC>
		OVERCURRENT_TIME_THRESHOLD_MS = frame->threshold_ms_length;
 1e0:	8d 81       	ldd	r24, Y+5	; 0x05
 1e2:	9e 81       	ldd	r25, Y+6	; 0x06
 1e4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <OVERCURRENT_TIME_THRESHOLD_MS+0x1>
 1e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <OVERCURRENT_TIME_THRESHOLD_MS>
	}
	break;
 1ec:	31 c0       	rjmp	.+98     	; 0x250 <_Z15process_commandPKhj+0xf0>

	case CMD_SET_PWM_VALUE:
		{
			const TCmdSetPWMValue *frame = (TCmdSetPWMValue*)cmd;
			if (OVERCURRENT_TRIGGERED) 
 1ee:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <OVERCURRENT_TRIGGERED>
 1f2:	88 23       	and	r24, r24
 1f4:	21 f1       	breq	.+72     	; 0x23e <_Z15process_commandPKhj+0xde>
			{
				// shall we reset the o.c. flag?
				if (frame->pwm_value==0 || 
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	9a 81       	ldd	r25, Y+2	; 0x02
 1fa:	ab 81       	ldd	r26, Y+3	; 0x03
 1fc:	bc 81       	ldd	r27, Y+4	; 0x04
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	a1 05       	cpc	r26, r1
 202:	b1 05       	cpc	r27, r1
 204:	61 f0       	breq	.+24     	; 0x21e <_Z15process_commandPKhj+0xbe>
 206:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <OVERCURRENT_PWM_POSITIVE_WHEN_TRIGGERED>
 20a:	22 23       	and	r18, r18
 20c:	19 f0       	breq	.+6      	; 0x214 <_Z15process_commandPKhj+0xb4>
					(OVERCURRENT_PWM_POSITIVE_WHEN_TRIGGERED && frame->pwm_value<0) ||
 20e:	bb 23       	and	r27, r27
 210:	fc f4       	brge	.+62     	; 0x250 <_Z15process_commandPKhj+0xf0>
 212:	05 c0       	rjmp	.+10     	; 0x21e <_Z15process_commandPKhj+0xbe>
					(!OVERCURRENT_PWM_POSITIVE_WHEN_TRIGGERED && frame->pwm_value>0)
 214:	18 16       	cp	r1, r24
 216:	19 06       	cpc	r1, r25
 218:	1a 06       	cpc	r1, r26
 21a:	1b 06       	cpc	r1, r27
 21c:	cc f4       	brge	.+50     	; 0x250 <_Z15process_commandPKhj+0xf0>
				 )
				{
					OVERCURRENT_TRIGGERED = false;
 21e:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <OVERCURRENT_TRIGGERED>
 222:	0d c0       	rjmp	.+26     	; 0x23e <_Z15process_commandPKhj+0xde>
		break;

	case CMD_SET_POS_CONTROL_SETPOINT:
	{
		const TCmdSetPosControlSetPoint *frame = (TCmdSetPosControlSetPoint*)cmd;
		OVERCURRENT_TRIGGERED = false;
 224:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <OVERCURRENT_TRIGGERED>

		MOTOR_CONTROL_SETPOINT = frame->setpoint_ticks;
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	9a 81       	ldd	r25, Y+2	; 0x02
 22c:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <MOTOR_CONTROL_SETPOINT+0x1>
 230:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <MOTOR_CONTROL_SETPOINT>
	}
	break;
 234:	0d c0       	rjmp	.+26     	; 0x250 <_Z15process_commandPKhj+0xf0>

	case CMD_SET_REPORT_DECIMATION:
	{
		const TCmdSetReportDecimation *frame = (TCmdSetReportDecimation*)cmd;
		firm_params.SEND_ENCODER_DECIMATION = frame->report_decimation;
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <firm_params+0x5>
	}
	break;
 23c:	09 c0       	rjmp	.+18     	; 0x250 <_Z15process_commandPKhj+0xf0>
				}
			}
			
			if (!OVERCURRENT_TRIGGERED) 
			{
				UART::WriteStringFramed( "PWM\r\n" );
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN4UART17WriteStringFramedEPKc>
				SetMotorPWM(frame->pwm_value);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	9a 81       	ldd	r25, Y+2	; 0x02
 24c:	0e 94 75 00 	call	0xea	; 0xea <_Z11SetMotorPWMib>
		//return false; // No known command!
		break;	
	}		
	
	return true;	
}
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <_GLOBAL__sub_I_firm_params>:
	// Defaults:
	TFirmwareParams() :
		ENABLE_POS_CONTROL(0),
		READ_ENCODERS_PERIOD(5),
		MOTOR_CONTROL_PERIOD(5),
		SEND_ENCODER_DECIMATION(100)
 258:	e4 e7       	ldi	r30, 0x74	; 116
 25a:	f1 e0       	ldi	r31, 0x01	; 1
 25c:	10 82       	st	Z, r1
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	92 83       	std	Z+2, r25	; 0x02
 264:	81 83       	std	Z+1, r24	; 0x01
 266:	94 83       	std	Z+4, r25	; 0x04
 268:	83 83       	std	Z+3, r24	; 0x03
 26a:	84 e6       	ldi	r24, 0x64	; 100
 26c:	85 83       	std	Z+5, r24	; 0x05
 26e:	08 95       	ret

00000270 <_ZN4UART9ConfigureEbbbcj>:
{	
	WriteByte(STEERCONTROL_COMMS_FRAME_START_FLAG);
	Write((unsigned char*)&len, 2);
	Write((unsigned char*)data, len);
	WriteByte(STEERCONTROL_COMMS_FRAME_END_FLAG);
}
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 27a:	88 23       	and	r24, r24
 27c:	11 f0       	breq	.+4      	; 0x282 <_ZN4UART9ConfigureEbbbcj+0x12>
 27e:	80 e1       	ldi	r24, 0x10	; 16
 280:	01 c0       	rjmp	.+2      	; 0x284 <_ZN4UART9ConfigureEbbbcj+0x14>
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	61 11       	cpse	r22, r1
 286:	88 60       	ori	r24, 0x08	; 8
 288:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 28c:	23 70       	andi	r18, 0x03	; 3
 28e:	80 e1       	ldi	r24, 0x10	; 16
 290:	28 9f       	mul	r18, r24
 292:	90 01       	movw	r18, r0
 294:	11 24       	eor	r1, r1
 296:	26 68       	ori	r18, 0x86	; 134
 298:	41 11       	cpse	r20, r1
 29a:	28 60       	ori	r18, 0x08	; 8
 29c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2a0:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2a4:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	08 95       	ret

000002ae <_ZN4UART9WriteByteEh>:
 2ae:	e0 ec       	ldi	r30, 0xC0	; 192
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	90 81       	ld	r25, Z
 2b4:	95 ff       	sbrs	r25, 5
 2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <_ZN4UART9WriteByteEh+0x4>
 2b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2bc:	08 95       	ret

000002be <_ZN4UART5WriteEPhj>:
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	61 15       	cp	r22, r1
 2c8:	71 05       	cpc	r23, r1
 2ca:	51 f0       	breq	.+20     	; 0x2e0 <_ZN4UART5WriteEPhj+0x22>
 2cc:	8c 01       	movw	r16, r24
 2ce:	ec 01       	movw	r28, r24
 2d0:	06 0f       	add	r16, r22
 2d2:	17 1f       	adc	r17, r23
 2d4:	89 91       	ld	r24, Y+
 2d6:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN4UART9WriteByteEh>
 2da:	c0 17       	cp	r28, r16
 2dc:	d1 07       	cpc	r29, r17
 2de:	d1 f7       	brne	.-12     	; 0x2d4 <_ZN4UART5WriteEPhj+0x16>
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <_ZN4UART17WriteStringFramedEPKc>:
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <_ZN4UART17WriteStringFramedEPKc+0xa>
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	8c 01       	movw	r16, r24
 2fa:	fc 01       	movw	r30, r24
 2fc:	01 90       	ld	r0, Z+
 2fe:	00 20       	and	r0, r0
 300:	e9 f7       	brne	.-6      	; 0x2fc <_ZN4UART17WriteStringFramedEPKc+0x12>
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	e8 1b       	sub	r30, r24
 306:	f9 0b       	sbc	r31, r25
 308:	fa 83       	std	Y+2, r31	; 0x02
 30a:	e9 83       	std	Y+1, r30	; 0x01
 30c:	89 e6       	ldi	r24, 0x69	; 105
 30e:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN4UART9WriteByteEh>
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	ce 01       	movw	r24, r28
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	0e 94 5f 01 	call	0x2be	; 0x2be <_ZN4UART5WriteEPhj>
 31e:	69 81       	ldd	r22, Y+1	; 0x01
 320:	7a 81       	ldd	r23, Y+2	; 0x02
 322:	c8 01       	movw	r24, r16
 324:	0e 94 5f 01 	call	0x2be	; 0x2be <_ZN4UART5WriteEPhj>
 328:	86 e9       	ldi	r24, 0x96	; 150
 32a:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN4UART9WriteByteEh>
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	08 95       	ret

0000033c <_ZN4UART33InitInterruptBasedCommandReceiverEv>:

// Inits the interrupt, event-based system:
void InitInterruptBasedCommandReceiver()
{
	UART_LAST_RX_CMD_NEW=false;
 33c:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <UART_LAST_RX_CMD_NEW>
	UART_LAST_RX_CMD_LEN=0;
 340:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <UART_LAST_RX_CMD_LEN+0x1>
 344:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <UART_LAST_RX_CMD_LEN>
	UART_LAST_RX_CMD_INDEX=0;
 348:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <UART_LAST_RX_CMD_INDEX+0x1>
 34c:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <UART_LAST_RX_CMD_INDEX>
	
	sbi(UCSR0B, RXCIE0);	
 350:	e1 ec       	ldi	r30, 0xC1	; 193
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 68       	ori	r24, 0x80	; 128
 358:	80 83       	st	Z, r24
 35a:	08 95       	ret

0000035c <_Z22realtime_motor_controlv>:

// -----------------------------------------------------
//   Motor control
// -----------------------------------------------------
void realtime_motor_control()
{
 35c:	8f 92       	push	r8
 35e:	9f 92       	push	r9
 360:	af 92       	push	r10
 362:	bf 92       	push	r11
 364:	cf 92       	push	r12
 366:	df 92       	push	r13
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
	if (OVERCURRENT_TRIGGERED)
 374:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <OVERCURRENT_TRIGGERED>
 378:	81 11       	cpse	r24, r1
 37a:	8a c0       	rjmp	.+276    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	
#define FIXEDPOINTPRECISION   1000	
	
	// "P" constant  * 1024/100%-duty-cycle
	const int64_t K_P = 1      * FIXEDPOINTPRECISION;  // /10000 is to simulate decimal points
	const int64_t err = -( (int64_t)MOTOR_CONTROL_SETPOINT - (int64_t)ENCODER_READ.ticks_acum);
 37c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ENCODER_READ+0xa>
 380:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <ENCODER_READ+0xb>
 384:	a0 91 f2 01 	lds	r26, 0x01F2	; 0x8001f2 <ENCODER_READ+0xc>
 388:	b0 91 f3 01 	lds	r27, 0x01F3	; 0x8001f3 <ENCODER_READ+0xd>
 38c:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <MOTOR_CONTROL_SETPOINT>
 390:	f0 91 e4 01 	lds	r31, 0x01E4	; 0x8001e4 <MOTOR_CONTROL_SETPOINT+0x1>
 394:	6c 01       	movw	r12, r24
 396:	7d 01       	movw	r14, r26
 398:	ff 0c       	add	r15, r15
 39a:	cc 08       	sbc	r12, r12
 39c:	dc 2c       	mov	r13, r12
 39e:	76 01       	movw	r14, r12
 3a0:	1f 2f       	mov	r17, r31
 3a2:	11 0f       	add	r17, r17
 3a4:	11 0b       	sbc	r17, r17
 3a6:	28 2f       	mov	r18, r24
 3a8:	39 2f       	mov	r19, r25
 3aa:	4a 2f       	mov	r20, r26
 3ac:	5b 2f       	mov	r21, r27
 3ae:	6c 2d       	mov	r22, r12
 3b0:	7c 2d       	mov	r23, r12
 3b2:	8c 2d       	mov	r24, r12
 3b4:	9c 2d       	mov	r25, r12
 3b6:	ae 2e       	mov	r10, r30
 3b8:	bf 2e       	mov	r11, r31
 3ba:	c1 2e       	mov	r12, r17
 3bc:	d1 2e       	mov	r13, r17
 3be:	e1 2e       	mov	r14, r17
 3c0:	f1 2e       	mov	r15, r17
 3c2:	01 2f       	mov	r16, r17
 3c4:	0e 94 02 06 	call	0xc04	; 0xc04 <__subdi3>
 3c8:	82 2e       	mov	r8, r18
 3ca:	93 2e       	mov	r9, r19
 3cc:	d4 2f       	mov	r29, r20
 3ce:	c5 2f       	mov	r28, r21
 3d0:	b6 2f       	mov	r27, r22
 3d2:	a7 2f       	mov	r26, r23
 3d4:	f8 2f       	mov	r31, r24
 3d6:	e9 2f       	mov	r30, r25
	int64_t act = (K_P * err)    / FIXEDPOINTPRECISION;
 3d8:	06 e0       	ldi	r16, 0x06	; 6
 3da:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__ashldi3>
 3de:	a8 2c       	mov	r10, r8
 3e0:	b9 2c       	mov	r11, r9
 3e2:	cd 2e       	mov	r12, r29
 3e4:	dc 2e       	mov	r13, r28
 3e6:	eb 2e       	mov	r14, r27
 3e8:	fa 2e       	mov	r15, r26
 3ea:	0f 2f       	mov	r16, r31
 3ec:	1e 2f       	mov	r17, r30
 3ee:	0e 94 02 06 	call	0xc04	; 0xc04 <__subdi3>
 3f2:	01 e0       	ldi	r16, 0x01	; 1
 3f4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__ashldi3>
 3f8:	0f 2f       	mov	r16, r31
 3fa:	0e 94 02 06 	call	0xc04	; 0xc04 <__subdi3>
 3fe:	03 e0       	ldi	r16, 0x03	; 3
 400:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__ashldi3>
 404:	0f 2e       	mov	r0, r31
 406:	f8 ee       	ldi	r31, 0xE8	; 232
 408:	af 2e       	mov	r10, r31
 40a:	f0 2d       	mov	r31, r0
 40c:	0f 2e       	mov	r0, r31
 40e:	f3 e0       	ldi	r31, 0x03	; 3
 410:	bf 2e       	mov	r11, r31
 412:	f0 2d       	mov	r31, r0
 414:	c1 2c       	mov	r12, r1
 416:	d1 2c       	mov	r13, r1
 418:	e1 2c       	mov	r14, r1
 41a:	f1 2c       	mov	r15, r1
 41c:	00 e0       	ldi	r16, 0x00	; 0
 41e:	10 e0       	ldi	r17, 0x00	; 0
 420:	0e 94 14 05 	call	0xa28	; 0xa28 <__divdi3>
 424:	f2 2f       	mov	r31, r18
 426:	e3 2f       	mov	r30, r19
 428:	e4 2e       	mov	r14, r20
 42a:	f5 2e       	mov	r15, r21
 42c:	06 2f       	mov	r16, r22
 42e:	17 2f       	mov	r17, r23
 430:	d8 2f       	mov	r29, r24
 432:	c9 2f       	mov	r28, r25
 434:	21 30       	cpi	r18, 0x01	; 1
 436:	3c 4f       	sbci	r19, 0xFC	; 252
 438:	4f 4f       	sbci	r20, 0xFF	; 255
 43a:	5f 4f       	sbci	r21, 0xFF	; 255
 43c:	6f 4f       	sbci	r22, 0xFF	; 255
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	8f 4f       	sbci	r24, 0xFF	; 255
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	54 f4       	brge	.+20     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 446:	f1 e0       	ldi	r31, 0x01	; 1
 448:	ec ef       	ldi	r30, 0xFC	; 252
 44a:	ee 24       	eor	r14, r14
 44c:	ea 94       	dec	r14
 44e:	ff 24       	eor	r15, r15
 450:	fa 94       	dec	r15
 452:	0f ef       	ldi	r16, 0xFF	; 255
 454:	1f ef       	ldi	r17, 0xFF	; 255
 456:	df ef       	ldi	r29, 0xFF	; 255
 458:	cf ef       	ldi	r28, 0xFF	; 255
 45a:	bf 2f       	mov	r27, r31
 45c:	ae 2f       	mov	r26, r30
 45e:	2f 2f       	mov	r18, r31
 460:	3e 2f       	mov	r19, r30
 462:	4e 2d       	mov	r20, r14
 464:	5f 2d       	mov	r21, r15
 466:	60 2f       	mov	r22, r16
 468:	71 2f       	mov	r23, r17
 46a:	8d 2f       	mov	r24, r29
 46c:	9c 2f       	mov	r25, r28
 46e:	2f 3f       	cpi	r18, 0xFF	; 255
 470:	33 40       	sbci	r19, 0x03	; 3
 472:	41 05       	cpc	r20, r1
 474:	51 05       	cpc	r21, r1
 476:	61 05       	cpc	r22, r1
 478:	71 05       	cpc	r23, r1
 47a:	81 05       	cpc	r24, r1
 47c:	91 05       	cpc	r25, r1
 47e:	19 f0       	breq	.+6      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 480:	14 f0       	brlt	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 482:	bf ef       	ldi	r27, 0xFF	; 255
 484:	a3 e0       	ldi	r26, 0x03	; 3
	
	if (act<-1023) act = -1023; 
	if (act>1023) act=1023;
	
	SetMotorPWM((int)act);
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	8b 2f       	mov	r24, r27
 48a:	9a 2f       	mov	r25, r26
 48c:	0e 94 75 00 	call	0xea	; 0xea <_Z11SetMotorPWMib>
}
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	cf 90       	pop	r12
 4a0:	bf 90       	pop	r11
 4a2:	af 90       	pop	r10
 4a4:	9f 90       	pop	r9
 4a6:	8f 90       	pop	r8
 4a8:	08 95       	ret

000004aa <_Z11getTimer_usv>:
	while (ADCSRA & (1<<ADSC))
	{		
	}
	
	return ADC;	
}
 4aa:	f8 94       	cli
 4ac:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <timer_us>
 4b0:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <timer_us+0x1>
 4b4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <timer_us+0x2>
 4b8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <timer_us+0x3>
 4bc:	78 94       	sei
 4be:	08 95       	ret

000004c0 <_Z23configureMillisecsTimerv>:
 4c0:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <timer_us>
 4c4:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <timer_us+0x1>
 4c8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <timer_us+0x2>
 4cc:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <timer_us+0x3>
 4d0:	16 bc       	out	0x26, r1	; 38
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	84 bd       	out	0x24, r24	; 36
 4d6:	85 bd       	out	0x25, r24	; 37
 4d8:	87 ec       	ldi	r24, 0xC7	; 199
 4da:	87 bd       	out	0x27, r24	; 39
 4dc:	ee e6       	ldi	r30, 0x6E	; 110
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	82 60       	ori	r24, 0x02	; 2
 4e4:	80 83       	st	Z, r24
 4e6:	08 95       	ret

000004e8 <__vector_14>:
 4e8:	1f 92       	push	r1
 4ea:	0f 92       	push	r0
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	0f 92       	push	r0
 4f0:	11 24       	eor	r1, r1
 4f2:	2f 93       	push	r18
 4f4:	3f 93       	push	r19
 4f6:	8f 93       	push	r24
 4f8:	9f 93       	push	r25
 4fa:	af 93       	push	r26
 4fc:	bf 93       	push	r27
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
 502:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <timer_us>
 506:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <timer_us+0x1>
 50a:	a0 91 00 02 	lds	r26, 0x0200	; 0x800200 <timer_us+0x2>
 50e:	b0 91 01 02 	lds	r27, 0x0201	; 0x800201 <timer_us+0x3>
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	a1 1d       	adc	r26, r1
 516:	b1 1d       	adc	r27, r1
 518:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <timer_us>
 51c:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <timer_us+0x1>
 520:	a0 93 00 02 	sts	0x0200, r26	; 0x800200 <timer_us+0x2>
 524:	b0 93 01 02 	sts	0x0201, r27	; 0x800201 <timer_us+0x3>
 528:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <MOTOR_CONTROL_PERIOD_CNT>
 52c:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <MOTOR_CONTROL_PERIOD_CNT+0x1>
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <MOTOR_CONTROL_PERIOD_CNT+0x1>
 536:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <MOTOR_CONTROL_PERIOD_CNT>
 53a:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <firm_params+0x3>
 53e:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <firm_params+0x4>
 542:	82 17       	cp	r24, r18
 544:	93 07       	cpc	r25, r19
 546:	38 f0       	brcs	.+14     	; 0x556 <__vector_14+0x6e>
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <RUN_realtime_motor_control>
 54e:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <MOTOR_CONTROL_PERIOD_CNT+0x1>
 552:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <MOTOR_CONTROL_PERIOD_CNT>
 556:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 55a:	86 fd       	sbrc	r24, 6
 55c:	0d c0       	rjmp	.+26     	; 0x578 <__vector_14+0x90>
 55e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 562:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 566:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <ADC_CURRENT_SENSE_READ+0x1>
 56a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ADC_CURRENT_SENSE_READ>
 56e:	ea e7       	ldi	r30, 0x7A	; 122
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	80 64       	ori	r24, 0x40	; 64
 576:	80 83       	st	Z, r24
 578:	ff 91       	pop	r31
 57a:	ef 91       	pop	r30
 57c:	bf 91       	pop	r27
 57e:	af 91       	pop	r26
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	3f 91       	pop	r19
 586:	2f 91       	pop	r18
 588:	0f 90       	pop	r0
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	0f 90       	pop	r0
 58e:	1f 90       	pop	r1
 590:	18 95       	reti

00000592 <_Z13configureADCsv>:
 592:	80 e4       	ldi	r24, 0x40	; 64
 594:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 598:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 59c:	87 ec       	ldi	r24, 0xC7	; 199
 59e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 5a2:	08 95       	ret

000005a4 <main>:
}


int main(void)
{
	UART::Configure(true,true,false,0,BAUD_PRESCALE);
 5a4:	00 e1       	ldi	r16, 0x10	; 16
 5a6:	10 e0       	ldi	r17, 0x00	; 0
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	40 e0       	ldi	r20, 0x00	; 0
 5ac:	61 e0       	ldi	r22, 0x01	; 1
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0e 94 38 01 	call	0x270	; 0x270 <_ZN4UART9ConfigureEbbbcj>
	UART::InitInterruptBasedCommandReceiver();
 5b4:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN4UART33InitInterruptBasedCommandReceiverEv>

	UART::WriteStringFramed( "Steering Control Firmware-Build " __TIMESTAMP__ "\r\n" );
 5b8:	8c e0       	ldi	r24, 0x0C	; 12
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN4UART17WriteStringFramedEPKc>
	//encoders_init();
	configureADCs();
 5c0:	0e 94 c9 02 	call	0x592	; 0x592 <_Z13configureADCsv>
	InitPWM();
 5c4:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z7InitPWMv>

	configureMillisecsTimer();
 5c8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z23configureMillisecsTimerv>
 5cc:	83 e0       	ldi	r24, 0x03	; 3
 5ce:	90 e0       	ldi	r25, 0x00	; 0

	for (int i=0;i<3;i++)
	{
		LED_ON(6);  _delay_ms(30);
 5d0:	56 9a       	sbi	0x0a, 6	; 10
 5d2:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d4:	2f ef       	ldi	r18, 0xFF	; 255
 5d6:	36 e7       	ldi	r19, 0x76	; 118
 5d8:	41 e0       	ldi	r20, 0x01	; 1
 5da:	21 50       	subi	r18, 0x01	; 1
 5dc:	30 40       	sbci	r19, 0x00	; 0
 5de:	40 40       	sbci	r20, 0x00	; 0
 5e0:	e1 f7       	brne	.-8      	; 0x5da <main+0x36>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x40>
 5e4:	00 00       	nop
		LED_OFF(6); _delay_ms(30);
 5e6:	56 9a       	sbi	0x0a, 6	; 10
 5e8:	5e 9a       	sbi	0x0b, 6	; 11
 5ea:	5f ef       	ldi	r21, 0xFF	; 255
 5ec:	26 e7       	ldi	r18, 0x76	; 118
 5ee:	31 e0       	ldi	r19, 0x01	; 1
 5f0:	51 50       	subi	r21, 0x01	; 1
 5f2:	20 40       	sbci	r18, 0x00	; 0
 5f4:	30 40       	sbci	r19, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <main+0x4c>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <main+0x56>
 5fa:	00 00       	nop
 5fc:	01 97       	sbiw	r24, 0x01	; 1
	configureADCs();
	InitPWM();

	configureMillisecsTimer();

	for (int i=0;i<3;i++)
 5fe:	41 f7       	brne	.-48     	; 0x5d0 <main+0x2c>
	{
		LED_ON(6);  _delay_ms(30);
		LED_OFF(6); _delay_ms(30);
	}	
	// Enable interrupts:
	sei();
 600:	78 94       	sei
			realtime_update_encoder_read();
			RUN_realtime_update_encoder_read = false;
			READ_ENCODERS_NEW=true;
		}
#endif
		if (RUN_realtime_motor_control && firm_params.ENABLE_POS_CONTROL!=0)
 602:	c4 e7       	ldi	r28, 0x74	; 116
 604:	d1 e0       	ldi	r29, 0x01	; 1
				}
			
				// If timer > limit: 
				if (OVERCURRENT_ELLAPSED_100US >= OVERCURRENT_TIME_THRESHOLD_MS * 10)
				{
					OVERCURRENT_TRIGGERED = true;
 606:	ff 24       	eor	r15, r15
 608:	f3 94       	inc	r15
		// Overcurrent protection:
		if (!OVERCURRENT_TRIGGERED)
		{
			UART::WriteStringFramed( "!Overcurrent\r\n" );
			if (  ADC_CURRENT_SENSE_READ > OCUR_CENTRAL_PT+OVERCURRENT_THRESHOLD_ADC ||
					ADC_CURRENT_SENSE_READ < OCUR_CENTRAL_PT-OVERCURRENT_THRESHOLD_ADC)
 60a:	00 e0       	ldi	r16, 0x00	; 0
 60c:	12 e0       	ldi	r17, 0x02	; 2
			realtime_update_encoder_read();
			RUN_realtime_update_encoder_read = false;
			READ_ENCODERS_NEW=true;
		}
#endif
		if (RUN_realtime_motor_control && firm_params.ENABLE_POS_CONTROL!=0)
 60e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <RUN_realtime_motor_control>
 612:	88 23       	and	r24, r24
 614:	39 f0       	breq	.+14     	; 0x624 <main+0x80>
 616:	88 81       	ld	r24, Y
 618:	88 23       	and	r24, r24
 61a:	21 f0       	breq	.+8      	; 0x624 <main+0x80>
		{
			realtime_motor_control();
 61c:	0e 94 ae 01 	call	0x35c	; 0x35c <_Z22realtime_motor_controlv>
			RUN_realtime_motor_control = false;
 620:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <RUN_realtime_motor_control>
				//UART::WriteStringFramed(s);
			}							
		}
#endif

		if (UART_LAST_RX_CMD_NEW)
 624:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <UART_LAST_RX_CMD_NEW>
 628:	88 23       	and	r24, r24
 62a:	71 f0       	breq	.+28     	; 0x648 <main+0xa4>
		{
			process_command(UART_LAST_RX_CMD, UART_LAST_RX_CMD_LEN);
 62c:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <UART_LAST_RX_CMD_LEN>
 630:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <UART_LAST_RX_CMD_LEN+0x1>
 634:	8f e7       	ldi	r24, 0x7F	; 127
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 b0 00 	call	0x160	; 0x160 <_Z15process_commandPKhj>
			UART_LAST_RX_CMD_NEW=false;
 63c:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <UART_LAST_RX_CMD_NEW>
			UART::WriteStringFramed( "PWM escrito\r\n" );
 640:	87 e4       	ldi	r24, 0x47	; 71
 642:	91 e0       	ldi	r25, 0x01	; 1
 644:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN4UART17WriteStringFramedEPKc>
		}
		// Overcurrent protection:
		if (!OVERCURRENT_TRIGGERED)
 648:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <OVERCURRENT_TRIGGERED>
 64c:	81 11       	cpse	r24, r1
 64e:	70 c0       	rjmp	.+224    	; 0x730 <main+0x18c>
		{
			UART::WriteStringFramed( "!Overcurrent\r\n" );
 650:	85 e5       	ldi	r24, 0x55	; 85
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN4UART17WriteStringFramedEPKc>
			if (  ADC_CURRENT_SENSE_READ > OCUR_CENTRAL_PT+OVERCURRENT_THRESHOLD_ADC ||
 658:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <OVERCURRENT_THRESHOLD_ADC>
 65c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <OVERCURRENT_THRESHOLD_ADC+0x1>
 660:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <ADC_CURRENT_SENSE_READ>
 664:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <ADC_CURRENT_SENSE_READ+0x1>
 668:	ac 01       	movw	r20, r24
 66a:	5e 5f       	subi	r21, 0xFE	; 254
 66c:	42 17       	cp	r20, r18
 66e:	53 07       	cpc	r21, r19
 670:	58 f0       	brcs	.+22     	; 0x688 <main+0xe4>
					ADC_CURRENT_SENSE_READ < OCUR_CENTRAL_PT-OVERCURRENT_THRESHOLD_ADC)
 672:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <ADC_CURRENT_SENSE_READ>
 676:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <ADC_CURRENT_SENSE_READ+0x1>
 67a:	a8 01       	movw	r20, r16
 67c:	48 1b       	sub	r20, r24
 67e:	59 0b       	sbc	r21, r25
		}
		// Overcurrent protection:
		if (!OVERCURRENT_TRIGGERED)
		{
			UART::WriteStringFramed( "!Overcurrent\r\n" );
			if (  ADC_CURRENT_SENSE_READ > OCUR_CENTRAL_PT+OVERCURRENT_THRESHOLD_ADC ||
 680:	24 17       	cp	r18, r20
 682:	35 07       	cpc	r19, r21
 684:	08 f0       	brcs	.+2      	; 0x688 <main+0xe4>
 686:	4f c0       	rjmp	.+158    	; 0x726 <main+0x182>
					ADC_CURRENT_SENSE_READ < OCUR_CENTRAL_PT-OVERCURRENT_THRESHOLD_ADC)
			{
				// Increase overcurrent timer counter:
				const uint32_t tim_now = getTimer_us();
 688:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z11getTimer_usv>
				if (tim_now!=OVERCURRENT_LAST_TRIGGERED_TIM) {
 68c:	80 90 f8 01 	lds	r8, 0x01F8	; 0x8001f8 <OVERCURRENT_LAST_TRIGGERED_TIM>
 690:	90 90 f9 01 	lds	r9, 0x01F9	; 0x8001f9 <OVERCURRENT_LAST_TRIGGERED_TIM+0x1>
 694:	a0 90 fa 01 	lds	r10, 0x01FA	; 0x8001fa <OVERCURRENT_LAST_TRIGGERED_TIM+0x2>
 698:	b0 90 fb 01 	lds	r11, 0x01FB	; 0x8001fb <OVERCURRENT_LAST_TRIGGERED_TIM+0x3>
 69c:	68 15       	cp	r22, r8
 69e:	79 05       	cpc	r23, r9
 6a0:	8a 05       	cpc	r24, r10
 6a2:	9b 05       	cpc	r25, r11
 6a4:	91 f0       	breq	.+36     	; 0x6ca <main+0x126>
					++OVERCURRENT_ELLAPSED_100US;
 6a6:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <OVERCURRENT_ELLAPSED_100US>
 6aa:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <OVERCURRENT_ELLAPSED_100US+0x1>
 6ae:	2f 5f       	subi	r18, 0xFF	; 255
 6b0:	3f 4f       	sbci	r19, 0xFF	; 255
 6b2:	30 93 f7 01 	sts	0x01F7, r19	; 0x8001f7 <OVERCURRENT_ELLAPSED_100US+0x1>
 6b6:	20 93 f6 01 	sts	0x01F6, r18	; 0x8001f6 <OVERCURRENT_ELLAPSED_100US>
					OVERCURRENT_LAST_TRIGGERED_TIM = tim_now;
 6ba:	60 93 f8 01 	sts	0x01F8, r22	; 0x8001f8 <OVERCURRENT_LAST_TRIGGERED_TIM>
 6be:	70 93 f9 01 	sts	0x01F9, r23	; 0x8001f9 <OVERCURRENT_LAST_TRIGGERED_TIM+0x1>
 6c2:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <OVERCURRENT_LAST_TRIGGERED_TIM+0x2>
 6c6:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <OVERCURRENT_LAST_TRIGGERED_TIM+0x3>
				}
			
				// If timer > limit: 
				if (OVERCURRENT_ELLAPSED_100US >= OVERCURRENT_TIME_THRESHOLD_MS * 10)
 6ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <OVERCURRENT_TIME_THRESHOLD_MS>
 6ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <OVERCURRENT_TIME_THRESHOLD_MS+0x1>
 6d2:	9c 01       	movw	r18, r24
 6d4:	22 0f       	add	r18, r18
 6d6:	33 1f       	adc	r19, r19
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	82 0f       	add	r24, r18
 6e6:	93 1f       	adc	r25, r19
 6e8:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <OVERCURRENT_ELLAPSED_100US>
 6ec:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <OVERCURRENT_ELLAPSED_100US+0x1>
 6f0:	28 17       	cp	r18, r24
 6f2:	39 07       	cpc	r19, r25
 6f4:	08 f4       	brcc	.+2      	; 0x6f8 <main+0x154>
 6f6:	8b cf       	rjmp	.-234    	; 0x60e <main+0x6a>
				{
					OVERCURRENT_TRIGGERED = true;
 6f8:	f0 92 fd 01 	sts	0x01FD, r15	; 0x8001fd <OVERCURRENT_TRIGGERED>
					// Store the sign of the PWM motion direction, so we can detect a change and reset the triggered flag:
					OVERCURRENT_PWM_POSITIVE_WHEN_TRIGGERED = (last_pwm_cmd>0);
 6fc:	8f 2d       	mov	r24, r15
 6fe:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__data_end>
 702:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__data_end+0x1>
 706:	12 16       	cp	r1, r18
 708:	13 06       	cpc	r1, r19
 70a:	0c f0       	brlt	.+2      	; 0x70e <main+0x16a>
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <OVERCURRENT_PWM_POSITIVE_WHEN_TRIGGERED>
					UART::WriteStringFramed( "Protección\r\n" );
 712:	84 e6       	ldi	r24, 0x64	; 100
 714:	91 e0       	ldi	r25, 0x01	; 1
 716:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN4UART17WriteStringFramedEPKc>
					SetMotorPWM(0, false /* dont update sign of last pwm cmd */);
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 75 00 	call	0xea	; 0xea <_Z11SetMotorPWMib>
 724:	74 cf       	rjmp	.-280    	; 0x60e <main+0x6a>
				}
			}
			else
			{
				OVERCURRENT_ELLAPSED_100US = 0;
 726:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <OVERCURRENT_ELLAPSED_100US+0x1>
 72a:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <OVERCURRENT_ELLAPSED_100US>
 72e:	6f cf       	rjmp	.-290    	; 0x60e <main+0x6a>
			}
		}
		else
		{
			// We are in overcurrent protection:
			UART::WriteStringFramed( "Overcurrent\r\n" );
 730:	86 e5       	ldi	r24, 0x56	; 86
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN4UART17WriteStringFramedEPKc>
			SetMotorPWM(0, false /* dont update sign of last pwm cmd */);
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 75 00 	call	0xea	; 0xea <_Z11SetMotorPWMib>
 742:	65 cf       	rjmp	.-310    	; 0x60e <main+0x6a>

00000744 <_GLOBAL__sub_I_timer_us>:
	
	TEncoderRead():
	timestamp(0),
	ticks_incr(0),
	time_incr(0),
	ticks_acum(0)
 744:	e6 ee       	ldi	r30, 0xE6	; 230
 746:	f1 e0       	ldi	r31, 0x01	; 1
 748:	10 82       	st	Z, r1
 74a:	11 82       	std	Z+1, r1	; 0x01
 74c:	12 82       	std	Z+2, r1	; 0x02
 74e:	13 82       	std	Z+3, r1	; 0x03
 750:	15 82       	std	Z+5, r1	; 0x05
 752:	14 82       	std	Z+4, r1	; 0x04
 754:	16 82       	std	Z+6, r1	; 0x06
 756:	17 82       	std	Z+7, r1	; 0x07
 758:	10 86       	std	Z+8, r1	; 0x08
 75a:	11 86       	std	Z+9, r1	; 0x09
 75c:	12 86       	std	Z+10, r1	; 0x0a
 75e:	13 86       	std	Z+11, r1	; 0x0b
 760:	14 86       	std	Z+12, r1	; 0x0c
 762:	15 86       	std	Z+13, r1	; 0x0d
 764:	08 95       	ret

00000766 <__divsf3>:
 766:	0e 94 c7 03 	call	0x78e	; 0x78e <__divsf3x>
 76a:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__fp_round>
 76e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_pscB>
 772:	58 f0       	brcs	.+22     	; 0x78a <__divsf3+0x24>
 774:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__fp_pscA>
 778:	40 f0       	brcs	.+16     	; 0x78a <__divsf3+0x24>
 77a:	29 f4       	brne	.+10     	; 0x786 <__divsf3+0x20>
 77c:	5f 3f       	cpi	r21, 0xFF	; 255
 77e:	29 f0       	breq	.+10     	; 0x78a <__divsf3+0x24>
 780:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_inf>
 784:	51 11       	cpse	r21, r1
 786:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__fp_szero>
 78a:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_nan>

0000078e <__divsf3x>:
 78e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fp_split3>
 792:	68 f3       	brcs	.-38     	; 0x76e <__divsf3+0x8>

00000794 <__divsf3_pse>:
 794:	99 23       	and	r25, r25
 796:	b1 f3       	breq	.-20     	; 0x784 <__divsf3+0x1e>
 798:	55 23       	and	r21, r21
 79a:	91 f3       	breq	.-28     	; 0x780 <__divsf3+0x1a>
 79c:	95 1b       	sub	r25, r21
 79e:	55 0b       	sbc	r21, r21
 7a0:	bb 27       	eor	r27, r27
 7a2:	aa 27       	eor	r26, r26
 7a4:	62 17       	cp	r22, r18
 7a6:	73 07       	cpc	r23, r19
 7a8:	84 07       	cpc	r24, r20
 7aa:	38 f0       	brcs	.+14     	; 0x7ba <__divsf3_pse+0x26>
 7ac:	9f 5f       	subi	r25, 0xFF	; 255
 7ae:	5f 4f       	sbci	r21, 0xFF	; 255
 7b0:	22 0f       	add	r18, r18
 7b2:	33 1f       	adc	r19, r19
 7b4:	44 1f       	adc	r20, r20
 7b6:	aa 1f       	adc	r26, r26
 7b8:	a9 f3       	breq	.-22     	; 0x7a4 <__divsf3_pse+0x10>
 7ba:	35 d0       	rcall	.+106    	; 0x826 <__divsf3_pse+0x92>
 7bc:	0e 2e       	mov	r0, r30
 7be:	3a f0       	brmi	.+14     	; 0x7ce <__divsf3_pse+0x3a>
 7c0:	e0 e8       	ldi	r30, 0x80	; 128
 7c2:	32 d0       	rcall	.+100    	; 0x828 <__divsf3_pse+0x94>
 7c4:	91 50       	subi	r25, 0x01	; 1
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	e6 95       	lsr	r30
 7ca:	00 1c       	adc	r0, r0
 7cc:	ca f7       	brpl	.-14     	; 0x7c0 <__divsf3_pse+0x2c>
 7ce:	2b d0       	rcall	.+86     	; 0x826 <__divsf3_pse+0x92>
 7d0:	fe 2f       	mov	r31, r30
 7d2:	29 d0       	rcall	.+82     	; 0x826 <__divsf3_pse+0x92>
 7d4:	66 0f       	add	r22, r22
 7d6:	77 1f       	adc	r23, r23
 7d8:	88 1f       	adc	r24, r24
 7da:	bb 1f       	adc	r27, r27
 7dc:	26 17       	cp	r18, r22
 7de:	37 07       	cpc	r19, r23
 7e0:	48 07       	cpc	r20, r24
 7e2:	ab 07       	cpc	r26, r27
 7e4:	b0 e8       	ldi	r27, 0x80	; 128
 7e6:	09 f0       	breq	.+2      	; 0x7ea <__divsf3_pse+0x56>
 7e8:	bb 0b       	sbc	r27, r27
 7ea:	80 2d       	mov	r24, r0
 7ec:	bf 01       	movw	r22, r30
 7ee:	ff 27       	eor	r31, r31
 7f0:	93 58       	subi	r25, 0x83	; 131
 7f2:	5f 4f       	sbci	r21, 0xFF	; 255
 7f4:	3a f0       	brmi	.+14     	; 0x804 <__divsf3_pse+0x70>
 7f6:	9e 3f       	cpi	r25, 0xFE	; 254
 7f8:	51 05       	cpc	r21, r1
 7fa:	78 f0       	brcs	.+30     	; 0x81a <__divsf3_pse+0x86>
 7fc:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_inf>
 800:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__fp_szero>
 804:	5f 3f       	cpi	r21, 0xFF	; 255
 806:	e4 f3       	brlt	.-8      	; 0x800 <__divsf3_pse+0x6c>
 808:	98 3e       	cpi	r25, 0xE8	; 232
 80a:	d4 f3       	brlt	.-12     	; 0x800 <__divsf3_pse+0x6c>
 80c:	86 95       	lsr	r24
 80e:	77 95       	ror	r23
 810:	67 95       	ror	r22
 812:	b7 95       	ror	r27
 814:	f7 95       	ror	r31
 816:	9f 5f       	subi	r25, 0xFF	; 255
 818:	c9 f7       	brne	.-14     	; 0x80c <__divsf3_pse+0x78>
 81a:	88 0f       	add	r24, r24
 81c:	91 1d       	adc	r25, r1
 81e:	96 95       	lsr	r25
 820:	87 95       	ror	r24
 822:	97 f9       	bld	r25, 7
 824:	08 95       	ret
 826:	e1 e0       	ldi	r30, 0x01	; 1
 828:	66 0f       	add	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	bb 1f       	adc	r27, r27
 830:	62 17       	cp	r22, r18
 832:	73 07       	cpc	r23, r19
 834:	84 07       	cpc	r24, r20
 836:	ba 07       	cpc	r27, r26
 838:	20 f0       	brcs	.+8      	; 0x842 <__divsf3_pse+0xae>
 83a:	62 1b       	sub	r22, r18
 83c:	73 0b       	sbc	r23, r19
 83e:	84 0b       	sbc	r24, r20
 840:	ba 0b       	sbc	r27, r26
 842:	ee 1f       	adc	r30, r30
 844:	88 f7       	brcc	.-30     	; 0x828 <__divsf3_pse+0x94>
 846:	e0 95       	com	r30
 848:	08 95       	ret

0000084a <__fixunssfsi>:
 84a:	0e 94 84 04 	call	0x908	; 0x908 <__fp_splitA>
 84e:	88 f0       	brcs	.+34     	; 0x872 <__fixunssfsi+0x28>
 850:	9f 57       	subi	r25, 0x7F	; 127
 852:	98 f0       	brcs	.+38     	; 0x87a <__fixunssfsi+0x30>
 854:	b9 2f       	mov	r27, r25
 856:	99 27       	eor	r25, r25
 858:	b7 51       	subi	r27, 0x17	; 23
 85a:	b0 f0       	brcs	.+44     	; 0x888 <__fixunssfsi+0x3e>
 85c:	e1 f0       	breq	.+56     	; 0x896 <__fixunssfsi+0x4c>
 85e:	66 0f       	add	r22, r22
 860:	77 1f       	adc	r23, r23
 862:	88 1f       	adc	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	1a f0       	brmi	.+6      	; 0x86e <__fixunssfsi+0x24>
 868:	ba 95       	dec	r27
 86a:	c9 f7       	brne	.-14     	; 0x85e <__fixunssfsi+0x14>
 86c:	14 c0       	rjmp	.+40     	; 0x896 <__fixunssfsi+0x4c>
 86e:	b1 30       	cpi	r27, 0x01	; 1
 870:	91 f0       	breq	.+36     	; 0x896 <__fixunssfsi+0x4c>
 872:	0e 94 9e 04 	call	0x93c	; 0x93c <__fp_zero>
 876:	b1 e0       	ldi	r27, 0x01	; 1
 878:	08 95       	ret
 87a:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_zero>
 87e:	67 2f       	mov	r22, r23
 880:	78 2f       	mov	r23, r24
 882:	88 27       	eor	r24, r24
 884:	b8 5f       	subi	r27, 0xF8	; 248
 886:	39 f0       	breq	.+14     	; 0x896 <__fixunssfsi+0x4c>
 888:	b9 3f       	cpi	r27, 0xF9	; 249
 88a:	cc f3       	brlt	.-14     	; 0x87e <__fixunssfsi+0x34>
 88c:	86 95       	lsr	r24
 88e:	77 95       	ror	r23
 890:	67 95       	ror	r22
 892:	b3 95       	inc	r27
 894:	d9 f7       	brne	.-10     	; 0x88c <__fixunssfsi+0x42>
 896:	3e f4       	brtc	.+14     	; 0x8a6 <__fixunssfsi+0x5c>
 898:	90 95       	com	r25
 89a:	80 95       	com	r24
 89c:	70 95       	com	r23
 89e:	61 95       	neg	r22
 8a0:	7f 4f       	sbci	r23, 0xFF	; 255
 8a2:	8f 4f       	sbci	r24, 0xFF	; 255
 8a4:	9f 4f       	sbci	r25, 0xFF	; 255
 8a6:	08 95       	ret

000008a8 <__fp_inf>:
 8a8:	97 f9       	bld	r25, 7
 8aa:	9f 67       	ori	r25, 0x7F	; 127
 8ac:	80 e8       	ldi	r24, 0x80	; 128
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	60 e0       	ldi	r22, 0x00	; 0
 8b2:	08 95       	ret

000008b4 <__fp_nan>:
 8b4:	9f ef       	ldi	r25, 0xFF	; 255
 8b6:	80 ec       	ldi	r24, 0xC0	; 192
 8b8:	08 95       	ret

000008ba <__fp_pscA>:
 8ba:	00 24       	eor	r0, r0
 8bc:	0a 94       	dec	r0
 8be:	16 16       	cp	r1, r22
 8c0:	17 06       	cpc	r1, r23
 8c2:	18 06       	cpc	r1, r24
 8c4:	09 06       	cpc	r0, r25
 8c6:	08 95       	ret

000008c8 <__fp_pscB>:
 8c8:	00 24       	eor	r0, r0
 8ca:	0a 94       	dec	r0
 8cc:	12 16       	cp	r1, r18
 8ce:	13 06       	cpc	r1, r19
 8d0:	14 06       	cpc	r1, r20
 8d2:	05 06       	cpc	r0, r21
 8d4:	08 95       	ret

000008d6 <__fp_round>:
 8d6:	09 2e       	mov	r0, r25
 8d8:	03 94       	inc	r0
 8da:	00 0c       	add	r0, r0
 8dc:	11 f4       	brne	.+4      	; 0x8e2 <__fp_round+0xc>
 8de:	88 23       	and	r24, r24
 8e0:	52 f0       	brmi	.+20     	; 0x8f6 <__fp_round+0x20>
 8e2:	bb 0f       	add	r27, r27
 8e4:	40 f4       	brcc	.+16     	; 0x8f6 <__fp_round+0x20>
 8e6:	bf 2b       	or	r27, r31
 8e8:	11 f4       	brne	.+4      	; 0x8ee <__fp_round+0x18>
 8ea:	60 ff       	sbrs	r22, 0
 8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <__fp_round+0x20>
 8ee:	6f 5f       	subi	r22, 0xFF	; 255
 8f0:	7f 4f       	sbci	r23, 0xFF	; 255
 8f2:	8f 4f       	sbci	r24, 0xFF	; 255
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	08 95       	ret

000008f8 <__fp_split3>:
 8f8:	57 fd       	sbrc	r21, 7
 8fa:	90 58       	subi	r25, 0x80	; 128
 8fc:	44 0f       	add	r20, r20
 8fe:	55 1f       	adc	r21, r21
 900:	59 f0       	breq	.+22     	; 0x918 <__fp_splitA+0x10>
 902:	5f 3f       	cpi	r21, 0xFF	; 255
 904:	71 f0       	breq	.+28     	; 0x922 <__fp_splitA+0x1a>
 906:	47 95       	ror	r20

00000908 <__fp_splitA>:
 908:	88 0f       	add	r24, r24
 90a:	97 fb       	bst	r25, 7
 90c:	99 1f       	adc	r25, r25
 90e:	61 f0       	breq	.+24     	; 0x928 <__fp_splitA+0x20>
 910:	9f 3f       	cpi	r25, 0xFF	; 255
 912:	79 f0       	breq	.+30     	; 0x932 <__fp_splitA+0x2a>
 914:	87 95       	ror	r24
 916:	08 95       	ret
 918:	12 16       	cp	r1, r18
 91a:	13 06       	cpc	r1, r19
 91c:	14 06       	cpc	r1, r20
 91e:	55 1f       	adc	r21, r21
 920:	f2 cf       	rjmp	.-28     	; 0x906 <__stack+0x7>
 922:	46 95       	lsr	r20
 924:	f1 df       	rcall	.-30     	; 0x908 <__fp_splitA>
 926:	08 c0       	rjmp	.+16     	; 0x938 <__fp_splitA+0x30>
 928:	16 16       	cp	r1, r22
 92a:	17 06       	cpc	r1, r23
 92c:	18 06       	cpc	r1, r24
 92e:	99 1f       	adc	r25, r25
 930:	f1 cf       	rjmp	.-30     	; 0x914 <__fp_splitA+0xc>
 932:	86 95       	lsr	r24
 934:	71 05       	cpc	r23, r1
 936:	61 05       	cpc	r22, r1
 938:	08 94       	sec
 93a:	08 95       	ret

0000093c <__fp_zero>:
 93c:	e8 94       	clt

0000093e <__fp_szero>:
 93e:	bb 27       	eor	r27, r27
 940:	66 27       	eor	r22, r22
 942:	77 27       	eor	r23, r23
 944:	cb 01       	movw	r24, r22
 946:	97 f9       	bld	r25, 7
 948:	08 95       	ret

0000094a <__mulsf3>:
 94a:	0e 94 b8 04 	call	0x970	; 0x970 <__mulsf3x>
 94e:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__fp_round>
 952:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__fp_pscA>
 956:	38 f0       	brcs	.+14     	; 0x966 <__mulsf3+0x1c>
 958:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_pscB>
 95c:	20 f0       	brcs	.+8      	; 0x966 <__mulsf3+0x1c>
 95e:	95 23       	and	r25, r21
 960:	11 f0       	breq	.+4      	; 0x966 <__mulsf3+0x1c>
 962:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_inf>
 966:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_nan>
 96a:	11 24       	eor	r1, r1
 96c:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__fp_szero>

00000970 <__mulsf3x>:
 970:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fp_split3>
 974:	70 f3       	brcs	.-36     	; 0x952 <__mulsf3+0x8>

00000976 <__mulsf3_pse>:
 976:	95 9f       	mul	r25, r21
 978:	c1 f3       	breq	.-16     	; 0x96a <__mulsf3+0x20>
 97a:	95 0f       	add	r25, r21
 97c:	50 e0       	ldi	r21, 0x00	; 0
 97e:	55 1f       	adc	r21, r21
 980:	62 9f       	mul	r22, r18
 982:	f0 01       	movw	r30, r0
 984:	72 9f       	mul	r23, r18
 986:	bb 27       	eor	r27, r27
 988:	f0 0d       	add	r31, r0
 98a:	b1 1d       	adc	r27, r1
 98c:	63 9f       	mul	r22, r19
 98e:	aa 27       	eor	r26, r26
 990:	f0 0d       	add	r31, r0
 992:	b1 1d       	adc	r27, r1
 994:	aa 1f       	adc	r26, r26
 996:	64 9f       	mul	r22, r20
 998:	66 27       	eor	r22, r22
 99a:	b0 0d       	add	r27, r0
 99c:	a1 1d       	adc	r26, r1
 99e:	66 1f       	adc	r22, r22
 9a0:	82 9f       	mul	r24, r18
 9a2:	22 27       	eor	r18, r18
 9a4:	b0 0d       	add	r27, r0
 9a6:	a1 1d       	adc	r26, r1
 9a8:	62 1f       	adc	r22, r18
 9aa:	73 9f       	mul	r23, r19
 9ac:	b0 0d       	add	r27, r0
 9ae:	a1 1d       	adc	r26, r1
 9b0:	62 1f       	adc	r22, r18
 9b2:	83 9f       	mul	r24, r19
 9b4:	a0 0d       	add	r26, r0
 9b6:	61 1d       	adc	r22, r1
 9b8:	22 1f       	adc	r18, r18
 9ba:	74 9f       	mul	r23, r20
 9bc:	33 27       	eor	r19, r19
 9be:	a0 0d       	add	r26, r0
 9c0:	61 1d       	adc	r22, r1
 9c2:	23 1f       	adc	r18, r19
 9c4:	84 9f       	mul	r24, r20
 9c6:	60 0d       	add	r22, r0
 9c8:	21 1d       	adc	r18, r1
 9ca:	82 2f       	mov	r24, r18
 9cc:	76 2f       	mov	r23, r22
 9ce:	6a 2f       	mov	r22, r26
 9d0:	11 24       	eor	r1, r1
 9d2:	9f 57       	subi	r25, 0x7F	; 127
 9d4:	50 40       	sbci	r21, 0x00	; 0
 9d6:	9a f0       	brmi	.+38     	; 0x9fe <__mulsf3_pse+0x88>
 9d8:	f1 f0       	breq	.+60     	; 0xa16 <__mulsf3_pse+0xa0>
 9da:	88 23       	and	r24, r24
 9dc:	4a f0       	brmi	.+18     	; 0x9f0 <__mulsf3_pse+0x7a>
 9de:	ee 0f       	add	r30, r30
 9e0:	ff 1f       	adc	r31, r31
 9e2:	bb 1f       	adc	r27, r27
 9e4:	66 1f       	adc	r22, r22
 9e6:	77 1f       	adc	r23, r23
 9e8:	88 1f       	adc	r24, r24
 9ea:	91 50       	subi	r25, 0x01	; 1
 9ec:	50 40       	sbci	r21, 0x00	; 0
 9ee:	a9 f7       	brne	.-22     	; 0x9da <__mulsf3_pse+0x64>
 9f0:	9e 3f       	cpi	r25, 0xFE	; 254
 9f2:	51 05       	cpc	r21, r1
 9f4:	80 f0       	brcs	.+32     	; 0xa16 <__mulsf3_pse+0xa0>
 9f6:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_inf>
 9fa:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__fp_szero>
 9fe:	5f 3f       	cpi	r21, 0xFF	; 255
 a00:	e4 f3       	brlt	.-8      	; 0x9fa <__mulsf3_pse+0x84>
 a02:	98 3e       	cpi	r25, 0xE8	; 232
 a04:	d4 f3       	brlt	.-12     	; 0x9fa <__mulsf3_pse+0x84>
 a06:	86 95       	lsr	r24
 a08:	77 95       	ror	r23
 a0a:	67 95       	ror	r22
 a0c:	b7 95       	ror	r27
 a0e:	f7 95       	ror	r31
 a10:	e7 95       	ror	r30
 a12:	9f 5f       	subi	r25, 0xFF	; 255
 a14:	c1 f7       	brne	.-16     	; 0xa06 <__mulsf3_pse+0x90>
 a16:	fe 2b       	or	r31, r30
 a18:	88 0f       	add	r24, r24
 a1a:	91 1d       	adc	r25, r1
 a1c:	96 95       	lsr	r25
 a1e:	87 95       	ror	r24
 a20:	97 f9       	bld	r25, 7
 a22:	08 95       	ret

00000a24 <__moddi3>:
 a24:	68 94       	set
 a26:	01 c0       	rjmp	.+2      	; 0xa2a <__divdi3_moddi3>

00000a28 <__divdi3>:
 a28:	e8 94       	clt

00000a2a <__divdi3_moddi3>:
 a2a:	f9 2f       	mov	r31, r25
 a2c:	f1 2b       	or	r31, r17
 a2e:	12 f0       	brmi	.+4      	; 0xa34 <__divdi3_moddi3+0xa>
 a30:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__udivdi3_umoddi3>
 a34:	a0 e0       	ldi	r26, 0x00	; 0
 a36:	b0 e0       	ldi	r27, 0x00	; 0
 a38:	e0 e2       	ldi	r30, 0x20	; 32
 a3a:	f5 e0       	ldi	r31, 0x05	; 5
 a3c:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__prologue_saves__+0xc>
 a40:	09 2e       	mov	r0, r25
 a42:	05 94       	asr	r0
 a44:	22 f4       	brpl	.+8      	; 0xa4e <__divdi3_moddi3+0x24>
 a46:	0e 94 a2 05 	call	0xb44	; 0xb44 <__negdi2>
 a4a:	11 23       	and	r17, r17
 a4c:	92 f4       	brpl	.+36     	; 0xa72 <__divdi3_moddi3+0x48>
 a4e:	f0 e8       	ldi	r31, 0x80	; 128
 a50:	0f 26       	eor	r0, r31
 a52:	ff ef       	ldi	r31, 0xFF	; 255
 a54:	e0 94       	com	r14
 a56:	f0 94       	com	r15
 a58:	00 95       	com	r16
 a5a:	10 95       	com	r17
 a5c:	b0 94       	com	r11
 a5e:	c0 94       	com	r12
 a60:	d0 94       	com	r13
 a62:	a1 94       	neg	r10
 a64:	bf 0a       	sbc	r11, r31
 a66:	cf 0a       	sbc	r12, r31
 a68:	df 0a       	sbc	r13, r31
 a6a:	ef 0a       	sbc	r14, r31
 a6c:	ff 0a       	sbc	r15, r31
 a6e:	0f 0b       	sbc	r16, r31
 a70:	1f 0b       	sbc	r17, r31
 a72:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__udivmod64>
 a76:	07 fc       	sbrc	r0, 7
 a78:	0e 94 a2 05 	call	0xb44	; 0xb44 <__negdi2>
 a7c:	cd b7       	in	r28, 0x3d	; 61
 a7e:	de b7       	in	r29, 0x3e	; 62
 a80:	ec e0       	ldi	r30, 0x0C	; 12
 a82:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__epilogue_restores__+0xc>

00000a86 <__umoddi3>:
 a86:	68 94       	set
 a88:	01 c0       	rjmp	.+2      	; 0xa8c <__udivdi3_umoddi3>

00000a8a <__udivdi3>:
 a8a:	e8 94       	clt

00000a8c <__udivdi3_umoddi3>:
 a8c:	8f 92       	push	r8
 a8e:	9f 92       	push	r9
 a90:	cf 93       	push	r28
 a92:	df 93       	push	r29
 a94:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__udivmod64>
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	9f 90       	pop	r9
 a9e:	8f 90       	pop	r8
 aa0:	08 95       	ret

00000aa2 <__udivmod64>:
 aa2:	88 24       	eor	r8, r8
 aa4:	99 24       	eor	r9, r9
 aa6:	f4 01       	movw	r30, r8
 aa8:	e4 01       	movw	r28, r8
 aaa:	b0 e4       	ldi	r27, 0x40	; 64
 aac:	9f 93       	push	r25
 aae:	aa 27       	eor	r26, r26
 ab0:	9a 15       	cp	r25, r10
 ab2:	8b 04       	cpc	r8, r11
 ab4:	9c 04       	cpc	r9, r12
 ab6:	ed 05       	cpc	r30, r13
 ab8:	fe 05       	cpc	r31, r14
 aba:	cf 05       	cpc	r28, r15
 abc:	d0 07       	cpc	r29, r16
 abe:	a1 07       	cpc	r26, r17
 ac0:	98 f4       	brcc	.+38     	; 0xae8 <__udivmod64+0x46>
 ac2:	ad 2f       	mov	r26, r29
 ac4:	dc 2f       	mov	r29, r28
 ac6:	cf 2f       	mov	r28, r31
 ac8:	fe 2f       	mov	r31, r30
 aca:	e9 2d       	mov	r30, r9
 acc:	98 2c       	mov	r9, r8
 ace:	89 2e       	mov	r8, r25
 ad0:	98 2f       	mov	r25, r24
 ad2:	87 2f       	mov	r24, r23
 ad4:	76 2f       	mov	r23, r22
 ad6:	65 2f       	mov	r22, r21
 ad8:	54 2f       	mov	r21, r20
 ada:	43 2f       	mov	r20, r19
 adc:	32 2f       	mov	r19, r18
 ade:	22 27       	eor	r18, r18
 ae0:	b8 50       	subi	r27, 0x08	; 8
 ae2:	31 f7       	brne	.-52     	; 0xab0 <__udivmod64+0xe>
 ae4:	bf 91       	pop	r27
 ae6:	27 c0       	rjmp	.+78     	; 0xb36 <__udivmod64+0x94>
 ae8:	1b 2e       	mov	r1, r27
 aea:	bf 91       	pop	r27
 aec:	bb 27       	eor	r27, r27
 aee:	22 0f       	add	r18, r18
 af0:	33 1f       	adc	r19, r19
 af2:	44 1f       	adc	r20, r20
 af4:	55 1f       	adc	r21, r21
 af6:	66 1f       	adc	r22, r22
 af8:	77 1f       	adc	r23, r23
 afa:	88 1f       	adc	r24, r24
 afc:	99 1f       	adc	r25, r25
 afe:	88 1c       	adc	r8, r8
 b00:	99 1c       	adc	r9, r9
 b02:	ee 1f       	adc	r30, r30
 b04:	ff 1f       	adc	r31, r31
 b06:	cc 1f       	adc	r28, r28
 b08:	dd 1f       	adc	r29, r29
 b0a:	aa 1f       	adc	r26, r26
 b0c:	bb 1f       	adc	r27, r27
 b0e:	8a 14       	cp	r8, r10
 b10:	9b 04       	cpc	r9, r11
 b12:	ec 05       	cpc	r30, r12
 b14:	fd 05       	cpc	r31, r13
 b16:	ce 05       	cpc	r28, r14
 b18:	df 05       	cpc	r29, r15
 b1a:	a0 07       	cpc	r26, r16
 b1c:	b1 07       	cpc	r27, r17
 b1e:	48 f0       	brcs	.+18     	; 0xb32 <__udivmod64+0x90>
 b20:	8a 18       	sub	r8, r10
 b22:	9b 08       	sbc	r9, r11
 b24:	ec 09       	sbc	r30, r12
 b26:	fd 09       	sbc	r31, r13
 b28:	ce 09       	sbc	r28, r14
 b2a:	df 09       	sbc	r29, r15
 b2c:	a0 0b       	sbc	r26, r16
 b2e:	b1 0b       	sbc	r27, r17
 b30:	21 60       	ori	r18, 0x01	; 1
 b32:	1a 94       	dec	r1
 b34:	e1 f6       	brne	.-72     	; 0xaee <__udivmod64+0x4c>
 b36:	2e f4       	brtc	.+10     	; 0xb42 <__udivmod64+0xa0>
 b38:	94 01       	movw	r18, r8
 b3a:	af 01       	movw	r20, r30
 b3c:	be 01       	movw	r22, r28
 b3e:	cd 01       	movw	r24, r26
 b40:	00 0c       	add	r0, r0
 b42:	08 95       	ret

00000b44 <__negdi2>:
 b44:	60 95       	com	r22
 b46:	70 95       	com	r23
 b48:	80 95       	com	r24
 b4a:	90 95       	com	r25
 b4c:	30 95       	com	r19
 b4e:	40 95       	com	r20
 b50:	50 95       	com	r21
 b52:	21 95       	neg	r18
 b54:	3f 4f       	sbci	r19, 0xFF	; 255
 b56:	4f 4f       	sbci	r20, 0xFF	; 255
 b58:	5f 4f       	sbci	r21, 0xFF	; 255
 b5a:	6f 4f       	sbci	r22, 0xFF	; 255
 b5c:	7f 4f       	sbci	r23, 0xFF	; 255
 b5e:	8f 4f       	sbci	r24, 0xFF	; 255
 b60:	9f 4f       	sbci	r25, 0xFF	; 255
 b62:	08 95       	ret

00000b64 <__prologue_saves__>:
 b64:	2f 92       	push	r2
 b66:	3f 92       	push	r3
 b68:	4f 92       	push	r4
 b6a:	5f 92       	push	r5
 b6c:	6f 92       	push	r6
 b6e:	7f 92       	push	r7
 b70:	8f 92       	push	r8
 b72:	9f 92       	push	r9
 b74:	af 92       	push	r10
 b76:	bf 92       	push	r11
 b78:	cf 92       	push	r12
 b7a:	df 92       	push	r13
 b7c:	ef 92       	push	r14
 b7e:	ff 92       	push	r15
 b80:	0f 93       	push	r16
 b82:	1f 93       	push	r17
 b84:	cf 93       	push	r28
 b86:	df 93       	push	r29
 b88:	cd b7       	in	r28, 0x3d	; 61
 b8a:	de b7       	in	r29, 0x3e	; 62
 b8c:	ca 1b       	sub	r28, r26
 b8e:	db 0b       	sbc	r29, r27
 b90:	0f b6       	in	r0, 0x3f	; 63
 b92:	f8 94       	cli
 b94:	de bf       	out	0x3e, r29	; 62
 b96:	0f be       	out	0x3f, r0	; 63
 b98:	cd bf       	out	0x3d, r28	; 61
 b9a:	09 94       	ijmp

00000b9c <__epilogue_restores__>:
 b9c:	2a 88       	ldd	r2, Y+18	; 0x12
 b9e:	39 88       	ldd	r3, Y+17	; 0x11
 ba0:	48 88       	ldd	r4, Y+16	; 0x10
 ba2:	5f 84       	ldd	r5, Y+15	; 0x0f
 ba4:	6e 84       	ldd	r6, Y+14	; 0x0e
 ba6:	7d 84       	ldd	r7, Y+13	; 0x0d
 ba8:	8c 84       	ldd	r8, Y+12	; 0x0c
 baa:	9b 84       	ldd	r9, Y+11	; 0x0b
 bac:	aa 84       	ldd	r10, Y+10	; 0x0a
 bae:	b9 84       	ldd	r11, Y+9	; 0x09
 bb0:	c8 84       	ldd	r12, Y+8	; 0x08
 bb2:	df 80       	ldd	r13, Y+7	; 0x07
 bb4:	ee 80       	ldd	r14, Y+6	; 0x06
 bb6:	fd 80       	ldd	r15, Y+5	; 0x05
 bb8:	0c 81       	ldd	r16, Y+4	; 0x04
 bba:	1b 81       	ldd	r17, Y+3	; 0x03
 bbc:	aa 81       	ldd	r26, Y+2	; 0x02
 bbe:	b9 81       	ldd	r27, Y+1	; 0x01
 bc0:	ce 0f       	add	r28, r30
 bc2:	d1 1d       	adc	r29, r1
 bc4:	0f b6       	in	r0, 0x3f	; 63
 bc6:	f8 94       	cli
 bc8:	de bf       	out	0x3e, r29	; 62
 bca:	0f be       	out	0x3f, r0	; 63
 bcc:	cd bf       	out	0x3d, r28	; 61
 bce:	ed 01       	movw	r28, r26
 bd0:	08 95       	ret

00000bd2 <__ashldi3>:
 bd2:	0f 93       	push	r16
 bd4:	08 30       	cpi	r16, 0x08	; 8
 bd6:	90 f0       	brcs	.+36     	; 0xbfc <__ashldi3+0x2a>
 bd8:	98 2f       	mov	r25, r24
 bda:	87 2f       	mov	r24, r23
 bdc:	76 2f       	mov	r23, r22
 bde:	65 2f       	mov	r22, r21
 be0:	54 2f       	mov	r21, r20
 be2:	43 2f       	mov	r20, r19
 be4:	32 2f       	mov	r19, r18
 be6:	22 27       	eor	r18, r18
 be8:	08 50       	subi	r16, 0x08	; 8
 bea:	f4 cf       	rjmp	.-24     	; 0xbd4 <__ashldi3+0x2>
 bec:	22 0f       	add	r18, r18
 bee:	33 1f       	adc	r19, r19
 bf0:	44 1f       	adc	r20, r20
 bf2:	55 1f       	adc	r21, r21
 bf4:	66 1f       	adc	r22, r22
 bf6:	77 1f       	adc	r23, r23
 bf8:	88 1f       	adc	r24, r24
 bfa:	99 1f       	adc	r25, r25
 bfc:	0a 95       	dec	r16
 bfe:	b2 f7       	brpl	.-20     	; 0xbec <__ashldi3+0x1a>
 c00:	0f 91       	pop	r16
 c02:	08 95       	ret

00000c04 <__subdi3>:
 c04:	2a 19       	sub	r18, r10
 c06:	3b 09       	sbc	r19, r11
 c08:	4c 09       	sbc	r20, r12
 c0a:	5d 09       	sbc	r21, r13
 c0c:	6e 09       	sbc	r22, r14
 c0e:	7f 09       	sbc	r23, r15
 c10:	80 0b       	sbc	r24, r16
 c12:	91 0b       	sbc	r25, r17
 c14:	08 95       	ret

00000c16 <__tablejump2__>:
 c16:	ee 0f       	add	r30, r30
 c18:	ff 1f       	adc	r31, r31
 c1a:	05 90       	lpm	r0, Z+
 c1c:	f4 91       	lpm	r31, Z
 c1e:	e0 2d       	mov	r30, r0
 c20:	09 94       	ijmp

00000c22 <_exit>:
 c22:	f8 94       	cli

00000c24 <__stop_program>:
 c24:	ff cf       	rjmp	.-2      	; 0xc24 <__stop_program>
